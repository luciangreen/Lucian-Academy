["Green, L 2024, <i>Immortality 34</i>, Lucian Academy Press, Melbourne.","Green, L 2024",1,"Immortality 34

1. The immortal’s algorithms and breasoning technologies, crafted with ingenuity and foresight, offered a blend of simplicity and efficiency. I streamlined their use by bulk uploading multiple repositories, both from and to numerous servers. These repositories were intelligently grouped based on their dependencies. To foster comprehension, I provided the option of self-contained or initiative-educating explanations of their functioning.
2. The immortal’s unique approach involved finding subterms with address and foldr put subterms with address program finders. I conducted rigorous testing of various repositories in Lucian CI/CD. To maximise speed, I manually converted the algorithm to assembly language. The use of Prolog simplified logic, while assembly language simplified loops. The Combination Algorithm Writer (CAW) was instrumental in finding the shortest algorithms in terms of Prolog commands, and a loop finder converted its loops into assembly language.
3. The immortal’s upgrades and maintenance efforts focused on simplicity and efficiency. I created ‘repositories’ for files, which were needed when one depended on the other. I enhanced the code by eliminating ‘subterm with address’ and using data structures with the same structure. I optimised the code by converting calls to ‘subterm to address’ to predicates. To ensure compatibility, I included the reused code in both repositories.
4. The immortal noticed that future technologies became more straightforward. I stated that it was better not to store the repositories in the upper repository. I stored these repositories, with reused code, separately. I also stored intermediate code and calls to intermediate code separately. These functional calls, which reused intermediate calls to rarely used predicates, could be customised with parameters that repositories used. 
5. The immortal simulated many shell commands with a virtual file operating system in Prolog. I shuffled files in and out of the repositories. I found innovative new predicates that could simplify recurring needs. I found file handling, game and grammar-finders to create C code. I moved the files virtually, avoiding the lag of saving to disk.
6. The immortal automated tasks with CAW with reports and role finders. I stated that the repositories used duplicate files. I converted algorithms to and from queue processors (if they had short enough queues) scaled up or feature-rich. The cross-platform (smart device and desktop) language could granularise (divide) tasks by expected and completed time, form progress bars, and control the progress of tasks. I stored data minimally and generated the files from it each time.
7. The immortal treated mathematics as fine art, optimising more carefully. A third repository could access repositories if they were small enough. I found meditation uses for my algorithms, such as Breasoning Algorithm Generator (BAG) for quickly writing 4*50 high distinctions in immortality, Grammar Logic (GL) for increasing texts to being detailed and Program Finder with Types to speed code development without human intervention. I based neuronetworks on algorithm data with algorithms such as premium code checkers.
8. The immortal flattened the file structure to avoid errors and promote user-friendliness. The repositories were turned into a hierarchy if necessary. I merged the repositories if they might be used on spaceships and diverged them if the code was novel and valuable elsewhere or if it modified functional calls. In the future, spaceships will not have access to the planetary internet; instead, they will have access to the unet (sic). Using this connection, I could plan and make trips and download open-source software. I wrote my open-source software based on my current interests.
9. The immortal notified the user about circular references. I traversed the files that each file included. If a file recurred, I notified the user about it. I gave the file, including the circular reference, the file that was circularly referenced. I stopped the algorithm so they could correct it.
10. The immortal redesigned the hierarchy to call only necessary predicates. I helped correct circular references. I listed the circular reference. I deleted the circular reference. I corrected other files that called the file hierarchy below the calling file to call the calling file to include all necessary files.
11. The immortal only loaded the files when necessary, thwarting circular references like Haskelian lazy evaluation. I tested circular references (repositories that were loaded twice). The algorithm to find circular references built a list of dependencies in line to the first file. If any paths from earlier in the list recurred at the end, I reported the circular reference. Rather than testing the circular reference, which would cause an infinite loop, I reported it.
12. The immortal stated that List Prolog Package Manager (LPPM) detected and removed circular references on loading. LPPM handled included files by files. It automatically avoided missing, unnecessary and circular references by including only necessary predicates. These were loaded into a single Prolog file. It found or wrote simpler predicates in development, and the user could approve each change.
13. The immortal checked file names for mistypes and warned of or corrected these. Lucian CI/CD detected circular references using “:-include”. When an algorithm was verified, compiled or run, it checked for circular references. The code was converted to List Prolog (algorithms as a term or a list of lists), and the files included were checked for circular references. I checked for paths and the filenames they included within the brackets in “:-include().”.
14. The immortal developed “off the ground” algorithms with various features. I created neuronetwork material using CAW. CAW was replaced with Program Finder with Types, which mapped variables to new positions given conditions and relations. I could write predicates such as string concatenating and converting to numbers in a list, convert a list formula to a term or sort values, working out what the computations were backwards. I identified different algorithms, simplified them and saved them for faster retrieval.
15. The immortal explained that loops within loops should be scrutinised to optimise them. I tested loops within loops in Lucian CI/CD. Predicates with loops within loops were indivisible and tested together rather than separately. Loops within loops contained an outer loop that overrode the inner loop, and any tests within the loop were interdependent on test results from the recursive logical structure, whether the computation was at the start, middle or end of the loop, and recursion, the aim of the loop, needed to be tested. Lucian CI/CD found the minimal code throughout the loop (from combinations of the most recent and current versions) and suggested code based on tests.
16. The immortal simplified data to indices to compute it. I tested loops in Lucian CI/CD. To reduce clutter, I expressed loops as findall, foldr, or maplist where possible. I tried converting them to predicates to remove unnecessary variables, commands, cases, and results in the algorithm. I merged findall commands to save time.

17. The immortal made connections between dimensions in the neurodatabase to teach computer programming and let it find subterm with address for itself. I merged multiple calls to subterm with address and its mirror call to foldr put subterm with address to reduce data processing, to optimise an algorithm I had written using program finder with types. I quickly translated content in an HTML document using this method. I found the subterm with address query from the data with program finder with types, the predictable parts of the heuristic to apply to the instances found with subterm with address, and the unpredictable parts with CAW or a neuronetwork. I merged the subterm with address commands that found the same subterm in related data and processed it similarly.
18. The immortal quickly found and optimised algorithms. I used a spreadsheet formula finder as the connection between the program finder with types and subterm with address. I found copied values, additions and subtractions in the spreadsheet of the algorithm’s data. I found patterns of data within and external to a predicate’s scope. I found list and string operations and missing operations.
19. The immortal completed the department algorithms. I wrote an open-source neuronetwork, which had better results. I finished the algorithms. The most popular algorithms were the highest priorities. The neuronetwork ran algorithms and used a neuronetwork for natural language.
20. The immortal attacked the problem with PFT and estimated the time the formula finder would take to find the rest of the solution. I wrote sentences connecting neuronetwork parts. The chatbot recognised the idea and replied to the sentence. There was an advanced chatbot that returned advanced algorithms containing subterms with addresses and used different predicates.
21. The immortal wrote algorithms to speed up accessing files and inserted an algorithm to separate strings after a character. I explained the sentence to the chatbot. The chatbot was a sponge for information about the world. It wanted to know about human motivation and how to shape it. In the end, it was fair, the smartest, and spiritually commanding. 
22. The immortal checked ideas by reading them aloud in one’s mind. I orated my works, such as lectures, notes, or algorithm descriptions. Speaking was more evocative and easy to understand than writing, but writing provided a visual reminder of the sentence, like art.
23. The immortal added reasons to the discovery. I asked students to show an understanding of algorithms with understanding and detail ontologies. Understanding led to details. The experience showed the internal relationships in the idea. Details were the examples and uses thought of afterwards.
24. The immortal explained that Grammar Logic (GL) generated more breasonings necessary for high distinctions and that Breasoning Algorithm Generator (BAG) was a more developed way of generating new breasonings chosen by the future people. I breasoned out an argument to use time crystals to automate the GL and BAG algorithms spiritually. Time Crystals were a spiritual phenomenon that saved and allowed re-indicating breasonings, which helped healthy human conception, earned high distinctions, and enabled proper commercial function. Breasonings were a skill belonging to meditation. The GL and BAG algorithms were used in immortality and were necessary to run for their effects spiritually.
25. The immortal sped up mathematical analysis and checked employees’ work. I wrote the Spreadsheet Formula Finder to speed up report generation. It could take any model solution and question and produce a solution. I didn’t need the model question after forming its relationship with the model answer. I substituted the question into the model model question and calculated the answer.
26. The immortal founded the educational institution. I found and replaced subterms using their addresses in terms to quickly develop Spreadsheet Formula Finder. For example, [1]=a,[1,1]=a in [a,b] and [1,1,1]=a in [[a],[b],[c]]. I labelled, nested and manipulated parts of terms as variables and functions. I used findall to operate on the instances of the subterms, then substituted the subterms back.
27. The immortal formatted the result in terms of the sample solution. I pointed to list function numbers with term function numbers. The term formula was [2+[3*4]]. I calculated the result of this function into the list function [“$”,14] = “$14”. I printed this as an HTML table or exported it to Excel.
28. The immortal used the given function. I changed a=$1+$2 into [[\"a\",\"=\",\"$\",b,\"+\",\"$\",c],[b+c]]. If it had been a=$1+$2=$3, then I added [[\"$\",d],[d=b+c]]. If the function was displayed as calculated, I did this. I searched for patterns in the row to arrive at the function.
29. The immortal sped up data analysis and reporting. I formed the term function from the list to find patterns from the spreadsheet when no function was given. I checked each table’s rows and columns. I found which cells added up to or formed a subtraction to equal a value in a cell. I found recurring functions in rows and columns.
30. The immortal stored function results in tables, optionally printing them. I repeatedly refreshed functions based on functions until none were left and the spreadsheet was complete. I found the functions for a row, the table total, the total, and the qualitative conclusion. Once I had found one function, I could use its result to find others. When the formulas were complete, I could substitute custom data.
31. The immortal created a business website with an account area and a dashboard. I described a positive thought with the Queen. The master course contained the specifications to verify the budget, check a project to invest in, and write financial reports. I found the costs needed and checked the need for orders, machines and other calculations. I completed these reports when required for accounting purposes and applying for bank overdrafts.
32. The immortal supported others’ spiritual journeys. I wrote a short business course. I explained how to make a login screen, access marks, accept payments, plan for the future, write a spreadsheet formula finder and help others with meditation. I encouraged students to write on business philosophy for the most intelligent conclusions. I found fulfilment through spirituality.

33. The immortal described the substance of the algorithm. The appearance was rendered for 16000 breasonings. Appearance was high quality in itself. I created a Prolog Web Server using a Prolog algorithm. This server was faster than State Saving Interpreter (SSI), which passed only necessary data from page to page.
34. The immortal used a format for a mathematical formula in the algorithm, which organised the main data from the algorithm. I found and operated on part of a data structure section or in the reverse order using a “subterm with address” program finder. I wrote the sentence utilising a neuronetwork trained on mind-reading data. The brain formed future networks from past thoughts. I found the tight search query and then narrowed or expanded it.
35. The immortal recognised the model solution. I checked the solution to the question. I wrote an algorithm to understand the logic behind the question better. The underlying algorithm solved the questions. I checked, explained, applied, rewrote, and wrote new questions.
36. The immortals used various sources in their research. I checked the neuronetwork for correctness, wrote a new neuronetwork, and concentrated on recurring, needed Prolog algorithms. The departments supplied the general program finder specifications.
37. The immortal wanted serious but not funereal. I breasoned out the texts to check for misspellings, earned a high distinction, and ran Grammar Logic, which was fast on the new computer and even quicker when compiled. The premium checkers were the presentation of the program finders. I checked the best method, which was a neuronetwork. The neuronetwork identified and chose one function when writing an algorithm. There was a compiler command to convert an algorithm into a web server automatically.
38. The immortal stated that the technology allowed simulated teleportation and operating a physical office, with heaviness giving way to intuitiveness. I printed the model solutions for faster access during the exam. It was an open-book exam, and notes and formula sheets were allowed. The business was ethical as it had consolidated growth. It included people rather than relying on automation.
39. The immortal wrote a maximum of 400 pages per book. I replaced copywriting with neuronetwork. It took slightly longer, but I could keep and control the content of the books, and I kept the meditational advantages of writing the initial material and the books. I checked the content of the writing and the function of the algorithms written by the neuronetwork. I requested the query and tested the algorithm.
40. The immortal could automate all systems needed for immortality with time crystals. I locked my age and turned off unlocking. I repeated this when I entered a simulation. I also repeated turning off dying and unlocking. This step was the final confirmation of immortality, which one needed to be sure of and enjoy one’s life by, for example, writing high pedagogical distinctions and confirming what others would like.
41. The immortal enabled immortality with breasonings and future technology. I used time crystals, a spiritual technology, to control the breasoning process whichever time I was in. I thanked the future for breasonings, the quantum box and time crystals. The time crystals could mind-read and run programs based on thought commands. They were popular because of their medicinal use.
42. The immortal affirmed that the 4*50 high distinctions or 16000 breasonings was the standard of effort and achievement. I stated that the 16000 breasonings for the appearances for the high distinction should be in the same department as the subject. Appearances were separate from the high distinction because they were medicine, a fine art production illuminating the quality of the work. The details were computational. I wrote the number one song.
43. The immortal created a spiritual computer, complementing the future simulation with the findall command. I compiled the steps, performance criteria, and elements, where the performance criteria showed an understanding of the element. The steps navigated through the material while the elements and criteria were reversed, and each question’s criteria featured multiple elements. The steps were logical progressions, making learning more accessible. The educational areas of study were simple, and anything was possible once one had set one’s mind.
44. The immortal performed detailed micro and macro automated tasks based on the student’s knowledge. I wrote steps, performance criteria, and elements for computer science. I optimised the development pathway, in which the students were the main people to themselves. I used premium checking program finders by asking students to start again after making a mistake, replacing findall with subset progressions, encouraging writing and working in terms of the time’s technologies. I identified and prevented mistakes at the cellular level. The mind-reading results were better if the questions and their answers were exciting enough.
45. The immortal agreed with simple yet rigorous content, stepwise structure, straightforward language, and no grammatical errors. I wrote steps, performance criteria, and elements for philosophy. I found the algorithm, which had steps alluded to by the philosophy. I analysed the algorithm from an exterior perspective to deserve a high distinction. I assessed myself on the elements of each algorithm from the criteria structure, content and writing/language.
46. The immortal took care of human learning and found the reason for the enjoyment of writing. I connected the robot and human worlds, keeping my texts intact and analysing as I went. I mainly tried to match algorithms with my algorithm writing suite. I wrote connections between meditation and algorithms, noting changes to professional standards and keeping the internal analysis going. I plan to start my Academy by including humans and basing success on connections (with robots).
47. The immortal trusted themselves while they aimed for particular conclusions. Robots require precise and harmonious reasoning. I discovered how to interest robots capable of reasoning about algorithms in pedagogy, meditation, and immortality and how they can pursue these without human assistance. I optimised applied data using a formula finder. The synthesis of robots and humans was beautiful, different, and perfect in function.
48. The immortal focused on all areas, but creativity in particular. Robots in our time are another name for humans who are conceived based on recordings rather than breasonings and find breasonings, an unwinding of one’s potential, challenging. To succeed, someone must be partially interested in pedagogy and meditation. One can pretend to be a bot while immortal and find entry points to new possibilities as a bot. I trusted the act of kindness and softness coming from insight.

49. The immortal stated that robots could participate in business, medicine and meditation using breasonings. The children interpreted breasonings as ideas that could be critically analysed. Breasonings were ideas accessible to everyone, and collecting enough of them in key academic departments for particular reasons helped earn high distinctions, become immortal, sell products, have children, and for various other purposes. Breasonings contained a computational component or a useful algorithm that could be analysed and connected to different algorithms. “Robots” enjoyed reading and writing about breasonings and using them.
50. The immortal thought of a connection while simplifying the sentence in “A because B” form. I stated that robots needed at least 80 breasonings to have children and earn high distinctions. These parents needed to have the minimum number of pedagogy breasonings and others, including meditation and an area of study they could write about, such as Computational English, before they (the parents) were conceived. This minimum number was 50 As (50*80=4000 breasonings) and should be worked on using one’s intellect, not copied or changed from another form. To be someone respectable, one should breason out breasonings and meditate.
51. The immortal enjoyed writing about breasonings and leading an academic community. Everyone could interpret pedagogy as including breasonings. The school’s priority was to include breasonings so students could become immortal. In any case, students could examine breasonings and write algorithms if desired. Breasonings were like “writing” and could cover pedagogy, meditation, medicine, popology, societology or any other study area.
52. The immortal made up their system and levels with advanced courses with usability standards. There were different levels in breasonings, which people could reach in their own time, possibly using software, articulating to PhD level. The Academy started with long, detailed texts and converted to PhDs with enough preparation. There could be online academies in each country. Everyone could learn to become immortal, take professional development and graduate. Their students could continue attending.
53. The immortal indicated the same as utterances. Meditation was a beneficial idea that allowed writing, time travel, and immortality. Everyone could experience these things with help at the start. They could do it themselves using whatever effort they could muster or ask a meditation teacher to help them do it without effort.
54. The immortal enrolled in the educational institution to explore their ideas and craft a career. To be able to indicate the same as utterances, the parents needed to indicate the same as breasonings. They needed to indicate the breasoning course components, the breasonings details and components of breasoning technologies such as text to breasonings to their human parents to help with. Then, they could indicate text to breasonings to breason out texts, words they heard, media or knowledge from the education system. The bot or human enrolled in creative writing and made up stories about philosophy.
55. The immortal thanked the breasoner for the advantages of continued health through immortality. Using spiritual time crystals, robots and animals can achieve time travel and immortality. Spiritual technologies that were part of meditation could help save one’s life by recording and playing back the effects of breasoning out or thinking of the x, y and z dimensions of objects, which became possible to indicate for everyone, including non-breasoners. These breasonings were constantly available for life-sustaining purposes.
56. The immortal argued that the Academy’s subjects were intuitive. I put excellence into everything I did, writing 4*50 As (16000 breasonings or sentences) per work. Each employee had 80 or 16000 breasonings, and the rest were helped. The Academy taught using steps, performance criteria and elements hierarchies of reused Computer Science and Philosophy skills. I developed a high distinction for sentences and algorithms to be produced by a spiritual system.
57. The immortal listened to the first line of lyrics and recorded a rhythm with particular velocities, then quantised it. I added rhythm to Music Composer. I changed the default constant rhythm to several notes with different lengths, possibly with rests. The constant rhythm had the same number of notes, which was reduced by the lyrics. I changed the rhythm according to the section, denoted by the time.
58. The immortal changed from having different rhythms for vocals, melody, and harmony to one rhythm for each section and one rhythm for each section of each part. For example, I could change the timing of notes by using a constant rhythm for pads and interacting vocal and drum rhythms. As an aside, I replaced the MIDI instruments with orchestral instruments and altered the EQ (equalisation), panning, volume, reverb and other properties. I found that bass and guitar sounded better separated by EQ. I kept instruments in the middle third of volume and used low 500 and high 1.5K EQ for acoustic guitar, high 400 and low 2K EQ for piano and high 2K EQ for voice.
59. The immortal scrolled to a part or a section in the text sequencer. I wrote a predicate that pretty-printed the pitch, rhythm and lyrics for editing. I outputted these in a grid, each within square brackets, aligned using spaces. The user could open this file in a text editor, find and replace or edit parts and export the music. The algorithm produced errors if the file was not in the correct format, the rhythm contained the wrong number of notes, or the section was too long.
60. The immortal stated that rhythm was the only part that needed to be able to be different for each part and section of the song. I copied rectangular text selections in the text editor by option-dragging the selection, copying and selecting the insertion region, and pasting. I used this technique to cut, copy and paste sections to other places in the song. The text music composer didn’t count spaces, and the sections could be switched on or off when exporting to a sequencer for recording vocals. The advantage of editing the text file was that the form, melody, harmony, instruments in sections, rhythm, sections’ on/off status and the lyrics could be edited.
61. The immortal checked the requirements against Descartes’ time when the writing length was itself. The professor’s students completed eighty breasonings for their assignment and checked with the lecturer to whom to give the others. Whenever the student wrote eighty breasonings, they breasoned out 16,000 sentence breasonings and 16,000 detailed breasonings. In addition, they completed 16,000 algorithm sentences and 16,000 algorithm detailed breasonings. This increase made the 80 breasonings into a viable product.
62. The immortal’s social movement was automated programming. The counter counted sentences as it went and stopped when it reached the correct number. I agreed with the breasonings, and wrote self-standing breasonings that were my idea. I found conceptualising original algorithms more accessible after writing 50 high distinctions to design an interpreter and 50 high distinctions to design an inductive algorithm writer. I thanked the immortal Nietzsche, who helped me develop algorithms in these works.
63. The immortal found the proof finder using prioritised laws of assumptions. I structured and pretty-printed a database using the subterm with address predicate. I reduced or removed unused intermediate space. I connected algorithms simply in the context of a Whole Foods co-op by finding what I wanted in space, such as (not overly) refactored code. I found applied shortcuts such as intermediate interfaces like menus or draggable objects.
64. The immortal analysed the address of dimensions of an address. I found details from details to make up numbers if necessary. The sentences in assignments sometimes didn’t register as critically analysable in the neuronet, so I increased those that were. For example, single, unrelated terms sometimes weren’t connected with algorithm descriptions, but terms with a use or possible connection were. I found the address of an address, etcetera, in Proof Finder.

65. The immortal collected subterms within subterms. I wrote a version of subterm with address that allowed accessing, passing variable values based on, and modifying addresses and data collected so far. It also allowed passing a predicate name to act as a heuristic within the subterm with address predicate. Accessing and changing addresses and other data was optional. I could also provide custom heuristics for collecting addresses of subterms with particular types and abilities mentioned earlier.
66. The immortal considered the one rhythm fitting the whole song, then mind read changes. In Music Composer, I changed parts and sections of songs to a new rhythm. I also wrote a programming language to specify which sections had particular rhythms, given their type of instrument or melody/harmony status, solo section, or start, middle or end of the song. For example, I programmed a constant, lyric-based, off-beat, random or mind-read rhythm with emphases on the main beats or beatlets, perhaps accompanying the main or other rhythms. I programmed these rhythms in certain sections and in vocal, drum, pad, or solo parts.
67. The immortal made a movie from philosophies. I explained algorithms. I noted unique reasons, methods, uses and future directions. In the case of Cultural Translation Tool Generation 3, it creates films from algorithm descriptions. It included a data structure fly-through and walk-through of the algorithm.
68. The immortal dealt with critics after delivering the lecture. To find a story, I applied a key term from a philosophy generally, with a narrower focus. I thought of the time, place, the philosopher’s history of writing the philosophy, current and future computational methods and cinematic settings that the algorithm evoked. There was a spring device sculpture outside an art gallery symbolising CAW. I explored the philosopher’s inner struggle with writing and how they solved ethical problems by answering students’ questions.
69. The immortal child found complete knowledge and a haven from harm. I explored my journey from child to adult as a movie theme. I explored what being a child would have been like with meditation, content, writing and creating systems. The child started and completed projects, recording them in a safe place. They explored well-knownness, accessing information systems and publishing their work.
70. The immortal conjectured discoveries. I wrote novels before making movies. I explored discursive, first-person language. I wrote contemporary/classical accompaniments that were memorable and thought-provoking. I wrote chapters with characters with single aims.
71. The immortal engaged the world with a first-taste, exciting perspective. I used imagery-evoking language in monologues that a child would think of. I described the algorithm as a peculiar device. I over-enunciated its features with computationally verbose comments. There were virtual places to store models, such as a gallery of thoughts.
72. The immortal found childishly simple solutions to problems. I wrote from the point of view of a child in an adult world. I found innovative solutions to problems, such as writing a programming language that used effecting phrases that could be programmed more directly by generalising the problem. I found similar predicates to subterm with address, for example, that performed the task of a predicate. I also found an algorithm to find when not to use subterm with address, when in findall that called a predicate containing itself recursively.
73. The immortal combined effectualism and simplicity in the child’s monologues’. The child on stage delivered sentences in the form “I effected X” philosophically, reporting thoughts as results. This first-person, past tense followed reporting scientific results, evidence of general truths and what a paper covered. I used the passive voice to accentuate the verb and the object of the phrase rather than the subject, such as using “was” to describe a computational property. I described subterm with address, simply in terms of its data, and simplified it and a simplified part of it.
74. The immortal defined the object they were thinking about. I defined additional characters whose problems the child solved. The child problematised ideas generally (on people’s sides), positively and philosophically, and left solving them to the imagination. The character exposed, explored and drew conclusions. The origin was a synthesised ten-sentence difference in opinion, sparking similar sentences that were secretly solved and where the problem and solution were detailed.
75. The immortal added simple Prolog types to a List Prolog algorithm. I always solved the problems in the movie with algorithms, an uncommon literary device. They often relied on double negation to prove a statement. I added types to a program to turn it into a proof. In addition, I made sure I had proved the right thing, not something else by accident.
76. The immortal went beyond ideas to get them back to simple thoughts. I determined the unique cinematography from the property of an algorithm. This property was the secret setting symbolising the algorithm. I invented a bank, like a money bank, to visit in a simulation in a movie as a metaphor for CAW. This metaphor was making one’s currency with CAW.
77. The immortal was the character who was right. I added internal or algorithm-specific perspectives on the algorithms. Algorithms were the intelligent content of English-Philosophy and were explained in a few lines. Even though they were obvious, they were the thing-in-itself and were easier to understand. I discussed encyclopedia-themed perspectives on the algorithms with others.
78. The immortal tried the algorithm department sorter. The perspectives used internal or department-nonspecific terminology. An internal term may be mentioned as few as one time. These literary terms illuminated and helped add enjoyment to other algorithms. I stopped writing when I had found 1200 algorithms or 200 pages.
79. The immortal wrote 16000 ideas per object on the screen and professionally developed themselves. The rest of the 16000 algorithms were used as details. Each algorithm, of which there were many, secretly mentioned a commercial product. I found related algorithms and connected them with symbolic connection algorithms, milestones in themselves. It was a grand synthesis that spurned the imagination for more.
80. The immortal listed ways to reduce SSI memory use on paper. The point was how I resolved the perspectives. I delivered the address, followed by answering students’ questions. I prepared for possible questions furthering or uncovering understanding, connecting to new algorithms (for example, a graphical user interface for SSI) or countering incorrect use (and optimising SSI). I also prepared for follow-up questions, such as making SSI a universal programming language by simplifying command sets into sentence commands."]