["Green, L 2022, <i>Immortality 13</i>, Lucian Academy Press, Melbourne.","Green, L 2022",1,"Immortality 13

1.  I downloaded the Learning Content Management System (LCMS) to browse offline.  Before this, I stated that the LCMS is based on the vision-impaired browser.  I reused the resource in the LCMS.  Also, I bookmarked my place.  I stored items offline.
2.  I computed on parallel machines.  I listed all the jobs.  Then, I selected parts of this list.  Then, I ran these parts on different computers simultaneously, given memory limitations and possibly multithreading.  Finally, I updated the finished tasks.
3.  I rewrote non-deterministic predicates in SSI to be more straightforward.  Before this, I wrote ARIA labels to help make my web page accessible to certain disabled people.  I used labels to describe elements with no visible text on the screen.  I compared Prolog on the web and terminal.  I wondered if SSI was more intuitive than SWI-Prolog.
4.  I wrote the HTML section in List Formatting Language (LFL) for programs.  First, I entered the Prolog algorithm.  Then, I pretty-printed Prolog.  The algorithm could be pre- or post-pretty-printed.  I could also pretty print List Prolog after entering it in List Formatting Language (lists of lists).
5.  There were specifications for the algorithms in the philosophy.  Separately, I created an HTML table with LFL. First, I inserted a list for the table. Next, I added a list for the row.  Finally, I put in a list for the column.
6.  I entered LFL in the chat.  Instead of video and presentations, the participants typed during lectures as a chat.  The lecturer typed and presented text lectures with questions.  The students typed the answers.  They asked questions and interacted during the conversation, customising their experience and catering for their needs.
7.  I could quickly test the website using a single set of tests.  Before this, I tried the SSI-WS app with SSI (not on the web) with a text file. First, I wrote the return-delimited inputs in the text file. Then, I pasted it into the terminal. Finally, I tested each part of the algorithm, assuming it gave output to check at the end.  
8.  When testing an SSI-WS algorithm in SSI (not in the browser), I entered the inputs when the text file name was entered as an argument, checking that the questions asking for input and the documentation matched the clarity and user-friendliness of the text file.  Given this file, the algorithm took each line of input from it.  I also tested each predicate separately.  I automatically took the output from one predicate to input into the following predicate to test the predicates separately.  I tried child predicates before parent predicates.
9.  As an alternative to pedagogy, I could breason out business.  Before this, I stated that I ran businesses after breasoning out a breasonings-accredited (not accredited outside) Pedagogy master's degree.  The education company was a business (earned money).  The teachers bought products as part of their jobs.  The first breasoning (the degree) protected future uses of the department, and subsequent breasonings were for specific products (jobs, employees, sales and assignments).
10.  Customers trusted the PhD/copywriting standard.  I breasoned out 5*50 GL As per product or text (5 million breasonings) and 250 breasonings per line of the text (in fact, I covered this with the 5 million breasonings).  I used all my computer and phone processors to finish the breasonings more quickly. As a result, I could help more meditators more carefully with mind-read philosophies, algorithms and details.
11.  I wrote 250 algorithms per assignment, with a particular number of assignments per degree.  I used the text-to-breasonings algorithm to produce the commerce-type As.  Text-to-breasonings required education, lecturer, recordings and medical skills.  Text-to-breasonings could breason out word (not character) breasonings of the correct quantity required for master's and above.  Epistemological knowledge needed to know that text-to-breasonings needed to do this included writing enough algorithms for qualifications.

12.  I researched infinite knowledge in immortality (for example, on news, music, mind reading, animals, new generations, breasonings, thoughts and algorithms, where one thought generated an infinite number of ideas).  Separately, I wrote that the educational products needed accreditation from Lucian Academy.  I considered professional development but wanted followed algorithms with details, which it couldn't quickly provide.  I considered the universe of ideas but needed more prestige.  I developed the prestigious institution with 5*50 As per assignment and a high number of algorithms for an important project.
13.  I structured the website to self-manage and automated it, including supporting new people.  I determined each process and helped people get them right with 5*50 As.  I started by writing the processes.  Then I wrote the arguments.  Finally, I voted on changes.
14.  I did all the work myself, and the philosophy doubled the results like the rebirth of nature, where I detailedly mind-read the other students' data.  I wrote that enough As took care of separate pitch As needed.  Separately, I helped someone with an A when I earned it, with interpreted (other sets of data for) algorithms to help lecture.  Two uses for algorithms helped students in the class make high distinctions.  Multiple use-trees over time helped up to 15 students earn high honours.
15.  I kept track of my student-employees and helped them research their and the world's frontiers of knowledge, synthesising them.  I did this as part of driving myself like a DBA.  I did this by writing 4*50 As for sales, bots and business.  As part of this, I wrote algorithms at school and in the industry.  I developed systems to help write more or detailedly mind-read details.  
16.  I acted professionally, preferring philosophy.  I led business mentoring (leading to professional accreditation, income and staff).  I hired lecturers who would teach my topics or meditation and breasoning-related topics.  On another note, while some wrote their systems and rose to the top, others helped others (it didn't matter if the systems were too fast for them, they needed key points about research to catch up).  While students were mind-read about algorithmic choices ahead of time, the teacher gave them more when they were correct.
17.  I wrote and organised advertisements with many As.  There were levels of As for each type of person, or someone like them, and their life events.  I wrote lots of drafts.  I started with a brief and mission (why the brief was unique to the task).  Then, I mind-read myself for alternative sides (why the product was attention-grabbing).  Finally, I was sure of the secret business product for prospects (or why the prospective customer wanted the product).
18.  The company needs to keep up with thoughts about bots and other things like them.  I offered accreditation (with 50*50 As, or 50 million breasonings at the start).  I broke away and focused on the quality of the planned thoughts.  If there was a departmental event in the person's life during the course, I breasoned out 50 As.  Education jobs required 5*50 As to cover different people and times involved.
19.  There was nothing above the level.  I gave 5*50 As to sales.  It was afterwards when the manager had finalised everything.  On a completely unrelated note, the professors could more easily analyse algorithms.  An algorithm invented the professor's work and the rest.
20.  I followed and met some of the people (lovingly called bots as a simple model).  I gave bots 5*50 As.  These \"bots\" were human, created at birth.  I breasoned out copies of the philosophies before their conception.  I mind-read their data for the algorithms.
21.  It was actually 50 As, but I had recently finished another book with 4*50, which influenced it, where it was clear everything required 4*50 As or higher.  As had  I composed and gave the music 5*50 As.  The background was audible.  It was more challenging to perform but highly desired.  I worried it sounded too negative and wouldn't be accepted.

22.  I anticipated the end of the music.  When mixing and mastering, I designed a hall with a grand design and acoustic features.  I made a conch painting.  The shell was gold and pink.  I thought of the audience's possible comments, such as \"It sounds like being underwater\".
23.  I found algorithm/building/copywriting intersections (with new words, such as \"commtainer\" (sic), which copied virtual rooms).  As part of this, I architecturally drafted cutting-edge copywriting.  I  did this by rewriting the copy and adding As.  I gazed at the text and thought of possible questions and answers.  Finally, I dipped into thousands of drafts (relating to different algorithms) after mind-mapping the topic and made the copy from them.
24.  I balanced human effort with the output of algorithms written wholly by the person.  I did this while programming at the company.  I did this by preparing SSI Web Service for simple apps.  Second, I had internal research that the company conducted.  Third, the company wrote white papers containing details about its products.
25.  The report covered the algorithm with comments, the input and output and optimisations.  I wrote the essay.  I integrated complicated algorithms.  I analysed a single idea in different ways, for example, induction, meta-induction, games and interpreters.  Finally, I settled for students covering algorithms.
26.  I helped with computer science by comparing and helping with assignment milestones.  I wrote the finance task.  I wrote the information product.  I rented the spare flat after I renovated it.  The trade-off between computer science and philosophy in favour of computer science was easiness for professors, and in favour of philosophy was higher grades (but I decided with enough epistemological guidance, computer science could have a 100% standard).
27.  I developed education courses, replying to students' posts about sources.  As well as supporting education jobs, they supported departmental products.  Education was responsible for delivering the developed idea to the student's brain.  The student needed to represent this answer in their work.  The answer could be in a lecture, source or meeting.
28.  The As contained ideas.  I wrote courses to help earn theatre, music and film jobs.  I developed the education As.  Also, I created the departmental As.  I aimed for specific jobs that were suitable.
29.  The student wrote assignments during the course (with quizzes about pre-written algorithms).  I wrote business courses.  I wrote specific As for everything.  I detailedly mind-read data for algorithms.  I expanded these when given time.
30.  I included answers to quizzes in written lectures.  I wrote the education course.  I asked what output particular input resulted in for an algorithm.  I asked about possible ways of solving problems.  I asked students to verify a viable method.
31.  The professor asked to read my Immortality book.  I wrote a meditation course.  In it, students completed algorithms analysing life by meditation.  I discussed the number of utterances and the difference between institutions and temples, an algorithm-writing algorithm and immortality.  The algorithm-writing algorithm could give meditators thoughts while meditating.
32.  There were medical jobs, students and hospitals.  I developed the medicine course.  There were 5*50 As for food and sleep.  I also discussed meditation, courses, pedagogy, mind-reading, time travel and immortality as medicine.  I emphasised using text-to-breasonings with headache prevention medicine for many of these.
33.  There might be 5*50 As for Computer Science or English jobs.  I decided this after writing the Computational English course.  As part of this, the students studied texts about computational hermeneutics.  They could teach Computational English to their students.  There were 5*50 As for jobs.  Computational English is related to writing algorithms or doing something productive each day.
34.  I developed an interpreter with algorithms in list format to generate more algorithms with a second algorithm.  As part of this, I wrote the Popology course.  This Popology course contained arguments about people and the interpreter.  To explain, an interpreter runs algorithms in a programming language.  Also, there were 5*50 As for teachers' and students' jobs.
35.  Teachers needed enough experience to become professors.  I wrote on Societology.  Societology included ideas on associations and compilers.  I aimed to write a compiler with a retry feature in trace mode, and I could eventually convert it to C.  There were 5*50 As for compiler teachers' and students' jobs and assignments.
36.  Lucian's machines were initially a cross between Prolog and register state machines, ending up as a compiler.  As part of this, I wrote about Mathematics.  This Mathematics book continued about compilers and other algorithms.  Students examined topics or synthesised algorithms, for example, induction and an interpreter.  Possibly examination by writing the book enabled Green to complete the compiler.
37.  I worked out many people wanted to become immortal.  So I wrote a book about immortality.  I wrote about the culmination of philosophy, meditation and programming and becoming a time travelling immortal.  People used text to breasonings to extend their life expectancies.  Immortality involved breasoning out 5*50 Grammar-Logic breasonings (5 million breasonings) on immortality.

38.  I breasoned out 5*50 As for computer science jobs.  I did this to profit from computer science.  As part of this, I mentioned my computer science projects in job interviews and applications.  I also earned money after studying courses.  In addition, I contributed ideas to education.
39.  I made money from my paraphraser algorithm.  I did this by writing the research.  First, I wrote the essay.  Then, I paraphrased it.  I also checked it using induction (thought of details).
40.  For a large project, there were 5 As of hand-breasoned breasonings.  Besides this, I made sales from Grammar-Logic.  I used the Grammar-Logic algorithm to generate mind maps for philosophies and details.  Grammar-Logic users also needed meditation and other skills.  Users required Grammar-Logic for masters and above and immortality.  This algorithm \"closed the cash register\" to give the rest of the content when the hand-breasoned breasonings had finished.
41.  I noted that Grammar-Logic didn't tire anyone, but the later breasonings were on from the earlier ones.  I earned from Text-to-Breasonings.  I noticed that combining philosophies and more from these derivatives meant infinite knowledge was possible.  I broke from tradition and elected to keep algorithm specifications in the philosophy.  I and others could sell Text-to-Breasonings, a way to automate breasoning companies.
42.  Essay Helper contained an argument map traversal algorithm and could be modified as an argument map editor.  I made earnings from Essay Helper.  Many people returned to study.  Essay writing contained laborious, automatable sides but required \"detailed reasoning to be corrected\", i.e. it needed hand-paraphrasing.  I could place Essay Helper on a website without needing to install Prolog.  
43.  I traced who had touched, looked at or logged in to account data.  I earned money from the interpreter.  I created the programming language to, for example, create algorithms, formulas or web apps.  I made money from the programs that ran with the interpreter.  I built systems in each part of the business based on the interpreter.
44.  I invested in education.  I made earnings from the compiler.  It was a step towards the compiler in C.  The compiler in C moved away from the original version of Prolog that ran with the compiler.  On the side, I assembled an ecosystem of utilities that I earned credit for in my studies.
45.  My aim with the compiler in C was education.  I also made money from writing this Prolog compiler in C.  I noticed that greater efficiency in the compiler in C paid off.  I also wrote educational materials in Prolog.  I wrote the compiler to guide understanding.
46.  I recommended students write their versions of predicates.  I financially benefited from Combination Algorithm Writer (CAW).  It was a brute-force inductive algorithm finder.  It could provide answers that Program Finder with Types (PFT) could not.  I was paid money for optimising my code with CAW.
47.  I solved the same old thing by working the answer out.  I found Program Finder with Types (PFT) financially viable in helping find algorithms.  The first version of Program Finder found programs that moved data around, for example, into new lists of lists.  The second version, PFT, found algorithms from variable-based type statements.  For example, the algorithm transformed common patterns in data into types and code.  
48.  I optimised the algorithm using algorithms and hand-written methods.  I made money from designing the font's state machine.  I learned about state machines, applicable elsewhere, and created a graphical user interface.  Separately, I could make a simple decision tree with PFT by either using PFT with CAW from scratch or PFT with a CAW dictionary item with the recursive use of findall.  I could prepare for the integration of PFT with CAW or neural networks.  
49.  The person earned more than the computer.  I earned money from making websites.  I was given money for production.  On another note, after generating part of the decision tree, I could use CAW to count the number of branches.  Also, I treated the decision tree like a state machine rather than a hierarchical list to find with PFT and found rules about other parts of the algorithm to customise the algorithm, like a neural network.
50.  The advantage was the code clarity of the compiler in the language.  I wrote other philosophy algorithms for profit.  I examined intelligent algorithms that occurred to me to understand the mind and computation better.  At the same time, I thought that the neural network was a state machine.  It reused parts and had state machines within state machines.  
51.  I noted that the institution was primarily a business (it needed a pedagogical base).  I designed neural networks for money.  They helped with natural language and more difficult inductive algorithm writing.  Later, I made up courses in business, small research ideas and many ideas to support them.  I looked at algorithms both neurally and non-neurally to check my thoughts.
52.  I used the neural network to optimise my code, printing subtle refinements and removing unnecessary data processing.  I did this to examine data science in different areas.  The employees needed to understand the (neurally outputted) algorithms to demonstrate understanding.  Separately, a state machine could be represented in code and was like a decision tree.  I preferred functional (intermediate) predicates to save code and wrote functions with separate functions.
53.  I educated people for money.  I did this by developing apps to make money.  I accomplished this by hosting the algorithm on my server.  As part of this, I had a free version with limited features.  The premium version had more features, for example, file access from Prolog.

54.  I made music licensing sales to companies by mind-reading when they were interested in the tracks.  I listed the opportunities.  I tested whether each of them wanted my tracks.  I included an \"other\" mind-reading option as a way of testing my unprofessionally produced tracks, and lyrics-only unproduced tracks were wanted, leading to making them.  I focused on medieval remixes of my music.
55.  I repeatedly checked my music, and the music the companies wanted was the same genre.  I made a shortlist of the genres of my music.  I checked my music's genres matched those of the opportunities.  I focused on my favourite tracks.  I wrote music just for opportunities.
56.  I researched, calculated the profit, and aimed for work goals.  I advertised my products and listed them on appropriate sites.  As part of this, I made apps that promoted innovative apps and philosophical products.  I also listed my services on work listing sites.  I devised a bot that could complete customised work.
57.  I wrote a findall to recursion converter when converting SSI to C (which could only process recursion).  I designed a font for my software.  It was legible at a small size.  In the first year of my academy, I asked students to use type statements in List Prolog.  Their limitation was that repeating lists needed brackets.
58.  After making money, I invested in others.  I made money from business and investments.  I used brain circuits, replicated success and encouraged sales.  When I had a surplus of money, I invested it in others.  I attended business pitches.
59.  I simplified and set the predicate as the question.  I wrote an algorithm that breasoned out five million breasonings from a file.  Five million breasonings is the number of breasonings in a PhD assignment (4 million) plus breasonings for professional work (1 million).  The algorithm truncated the file to the number of words that the Grammar-Logic algorithm would transform into the number of breasonings (words).  I breasoned out 5 million breasonings for each chapter and algorithm.
60.  I covered the PhDs myself.  Separately, I ran the algorithm that breasoned out 500 breasonings ten times.  I ran these ten threads concurrently.  I also wrote a queueing algorithm for my meditation tasks.  In addition, I wrote the algorithm-writer algorithms to write algorithms for assignments.
61.  I recorded the assignments which I had increased.  I wrote a file with the lines to increase and a file with the lines increased.  I did this by duplicating the lines in the file so that it met the number of words.  I wrote details about these lines.  I recorded the philosophies and algorithms which I had increased.
62.  I found customers and made decisions using a synthesis of mind-reading, Grammar-Logic, Jyotish (Vedic astrology) and neural networks.  A scientific method was neural networks, which, like program finder, could remap data.  I began writing predicates with program finder, getting down to foldr append and foldr string concat, etc.  I used if-then and level counters in predicates.  I wrote simpler predicates using this method.
63.  I could control all aspects of my business.  I did this by writing 5*50 As for Vedic astrology.  First, I located the planets at my birth.  I found daily predictions.  I made business decisions.
64.  I talked about each key idea.  I breasoned out 5*50 As for each sentence when publishing.  I found these 5*50 As with help from Vedic astrology.  I found 5*50 As for customers.  I wrote them, and I found a suitable interface.
65.  I taught at the academy with a series of algorithms (about commands) stepped through on the web (explaining each data structure's entire transformation).  I taught the essential skill with the predicate.  I used A=[B|C] rather than [B|C] in the predicate head.  I simplified some predicates.  I let others simplify the rest.
66.  I set 20 tests per assignment without saying to use previous predicates or asking questions that split up related predicates.  I wrote breasonings about the tests.  I prepared enough breasonings for each project.  I focused on computational philosophy that maximised human problem-solving.  As an aside, I could do Shell with a Prolog theorem prover.
67. I stated that append([\"a\",\"b\"],\"c\",D) should give the result D=[\"a\",\"b\"|\"c\"].  I took care of this by running the append predicate in the interpreter.  I didn't turn off trace mode during the append predicate.  I modified the append predicate to do something else.  I simplified and optimised a predicate, splitting it into different functions.
68.  I researched reading and writing files.  I separated SSI and non-SSI non-deterministic commands (with multiple outputs).  In non-SSI, these commands naturally returned multiple results because I ran List Prolog with Prolog.  In SSI, these commands found a certain number of results at the start and returned these on backtracking.  The non-deterministic non-SSI commands couldn't report failure because if-then interrupted backtracking.
69.  I wrote a single command for all non-deterministic SSI commands, then wrote individual predicates for them.  I ran these Prolog commands from within List Prolog as part of a prototype and to see if I could add to them.  Then I removed this command and wrote predicates that I could run to find these commands' solutions.  These predicates could change memory settings, globals (predicates) and retract predicates.  I could also write a single command for all non-deterministic and deterministic SSI and non-SSI commands, then change them to predicates.
70.  I designed a command that turned a data structure into a state machine and then into an algorithm.  Separately, I could treat all commands as non-deterministic, i.e. they returned multiple possible results.  But it was easier to read these commands if they were treated separately as deterministic or non-deterministic.  However, I would still replace them with predicates.  I could treat a deterministic command as non-deterministic with no other solutions.  However, it would be easier to read and modify code that treated them as deterministic.  At any rate, I would replace many commands with List Prolog predicates, some of which made commands to the interpreter.
71.  I added core (recommended) methods to tutorials.  On a different note, I added new commands to languages and reserved words by scanning a list of predicates.  These commands could be translated more quickly and protected from being redefined.  I could detect new commands and add only those to these lists.  The new interpreter returned several pretty-printed non-deterministic results.  As a precaution, I checked when a predicate had choice points left over.
72.  I added a version of foldl that didn't require an initial value but took the first value of the list.  Unrelatedly, I added more ISO commands (with terms).  If one of these commands took an argument with a term, for example, write, it would write this term.  Terms such as commands also could be called.  Finally, I wrote the interpreter, including only necessary changes, where lists I could manipulate more easily replaced terms.
73.  I added new commands to the documentation.  I did this by scanning these commands from the predicates.  Next, I listed their modes.  Then, I added the new commands to unit tests using data generated from their type statements.  Finally, I checked whether the unit tests were correct and that the modified predicates worked with changes to them.
74.  I set C globals to array trees representing, for example, empty lists for reuse.  On another note, I rewrote the interpreter to accommodate commands, such as subatom, with more than three variables.  Subatom could take one of several modes.  In SSI, which needed to calculate several sets of results of subatom at first, I took inputs and gave outputs.  I included the modes of arguments in the new version, which could deal with multiple arguments and modes.
75.  I rewrote \"get values\" to return a list of values for any number of arguments.  I found the value of the first argument.  I repeated this for each argument.  I only got values for inputs.  I computed outputs and saved them to variables.
76.  I ran commands by processing their variables recursively.  After finding the input variables' values, I constructed the command term and ran it.  Later, I skipped this stage and ran the command as a List Prolog predicate.  I couldn't see any reason to keep the code construction algorithm; however, system calls might require it and possible types and modes.  As a side note, I grafted the deprecated feature into a new version by adding its predicate to the algorithm.
77.  I needed undefined variables to avoid singleton errors.  I didn't save values to or retrieve values from undefined variables represented by the underscore character (\"_\").  The interpreter shouldn't treat it like a defined variable (such as \"_A\" or \"B\"), which can save and return values.  I made sure that the Prolog to List Prolog converter and List Prolog to Prolog converter used strings (e.g. \"_\"), not atoms (e.g. '_') as variable names to ensure compatibility.  I also ensured algorithms converted from Prolog into List Prolog were compatible by changing variable handles so they wouldn't conflict with strings in Prolog.
78.  I kept if-then free of negation (which would have if-then's non-nested) for clarity.  This process was part of converting SSI to C.  I maintained user-friendliness by adhering to term-syntax until converting to terms as array-trees in C.  I could also use terms as commands but didn't need to because C had no way of dealing with Prolog commands.  These terms could be commands in findall, etc., but didn't need to because C had no choice points to cope with findall.
79.  I initialised numbers as equals4 arguments as \"1\", not \"\\\"1\\\"\" (a number as a string) and not 1 (not a string, which it needs to be for me to convert it into a term).  Earlier, I stated that I stored variables within equals4 and didn't need to initialise them separately.  I only needed to initialise the terms representing the variables, for example, \"[v, a]\".  I converted these strings into terms in C array trees.  Upon conversion to C, \"[v, a]\" is converted to a C array tree in the code.
80.  I wrote comments describing certain term strings as converted to array trees (a way of storing a term as a tree in an array in C).  I needed to initialise variables (integers, strings and arrays) used for the first time as arguments in C.  I wouldn't always use these variables as equals4 arguments.  However, I sometimes might use them as arguments in other functions converted from the interpreter to C.  Initialisation includes setting the variable type and assigning an initial value.

"]

