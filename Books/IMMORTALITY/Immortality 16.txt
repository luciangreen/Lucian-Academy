["Green, L 2024, <i>Immortality 16</i>, Lucian Academy Press, Melbourne.","Green, L 2024",1,"Immortality 16 - I could help more people become immortal.

1.  I articulated to an \"easy\" level, i.e. wrote simple three-step algorithms for each sentence. 
I wrote letters to teach and establish immortality centres.  I wrote notes outlining my proposal to open schools in countries. 
I aimed to increase the subjects with other subjects I taught.  This increase was possible by relating to, for example, the text to breasonings algorithm.  The difficulty level should be appropriate for the grade (the primary school had different texts from the university).
2.  I found the link between spiritual or natural bots, other things and immortality.  So I opened schools to teach people to become immortal. 
First, the people read and wrote enough to feel developed.  Next, they must be well-versed in the necessary skills.  Then, they must outline their plans and financial plans for immortality.
3.  Immortality helped people to help people with immortality, which had many benefits, such as creating peace.  For example, I applied for grants to travel to open educational institutions to teach immortality. 
I researched the best places to open institutions.  I was aware of the business skill of professional development.  Education courses helped achieve the correct standard of work in studies.
4.  I was aware the local and global economy affected the property market and helped the tenants to earn money.  So I bought property in countries to help fund the centres and educational institutions. 
I asked a rich person for property funds to buy enough property to fund the school, which had advantages and enough to help society.  First, I calculated the level of interest and acceptance to start a particular institution in a city.  Then, I figured out the number of properties needed to support this institution.
5.  Lucian's texts on immortality influenced many to become immortal.  Immediatism (sic) in the availability of immortality meant the sutra would be called necessary.  Also, courses would become required in studying the path to immortality.  Economists would calculate the economic effects of immortals and aim for them (people would disappear in simulation \"shells\", and two different sets of occupants would occupy houses at the same time). 
Immortality was activated by time travelling to a time (5689), (requiring meditation before and after trips there and back) and switching it on, both requiring 250 breasonings, before or after which the bulk of the necessary philosophy should be breasoned out (the reading or writing of which was not immediate).  
6.  Older adults in young bodies needed to explain they were old, skilled and mature.  Immortality was a medicine for potentially terminal disease sufferers, so it could become available to people who needed it. 
However, a court case once concluded that meditation might not be effective in pathological disease sufferers. 
A person living with Parkinson's disease given immortality medicine appeared to die, but some believed he didn't experience death and lived on with his loved ones around him.  The immortality switch could be applied from 18 years of age, preventing disease and ageing.
7.  Viruses attack the immune system, potentially killing the person.  Immortality was a form of medicine that could return to a state before being infected with a virus, preventing its effects.  For example, meditation sometimes reset to a copy of the body before a medical problem to avoid it, but immortality allowed this to be permanent. 
One person reported meditation helped maintain their youthful looks.  Immortality could let them stay permanently young.
8.  Being in one's physical and mental prime meant being youthful, mentally fast and able to achieve better results.  Immortality's immediate availability to people in their physical and psychological prime meant that teachers needed to teach them prerequisite skills (usually left to be randomly encountered).  These included pedagogy.  Also, these included anti-headache medicine.  Also, they included time travel, meditation and other forms of spiritual therapy.
9.  I made a conjecture about the effects of an immortal taking Chinese herbs for longevity, possibly such as having more energy.  Given its label as an alternative form of medicine, immortality would need to be tested, given different people's conditions.  Therapists should only administer it to those who are conscious. 
And it should only be administered to those who could decide they wanted it and wanted to maintain it.  Also, it should only be issued to those who wish to avoid death.
10.  My algorithms and philosophies didn't prevent others from writing, but they inspired them.  For example, some proponents of immortality claimed that the experience of mortals after death was similar to immortality.  Still, the people didn't have a physical form visible to other mortals, so teaching the skill of immortality was identical but avoided the inconvenience of injury and death. 
It was unclear whether the mortal afterlife ended and led to reincarnation or something else, so some assumed they were immortals in a form.  However, immortality avoided the pitfalls of medical problems and accidents (through controlling a computer simulation), particularly an aggressive chain of deaths.  Attaining immortality raised the question of the necessity of breasoning out enough breasonings before conceiving children to give them a high quality of life and ideas during immortality.
11.  Some decided to work in Education.  In combination with University-learnt meditation, immortality was a form of heaven on Earth.  Meditation provided the high quality of life that people desired.  Immortality provided the solution to body degradation and meant long-term projects and guidance of others was possible.  Immortals could choose to remain the same age in their own time without dying.  
12.  I experienced meditation with a young company, which I could keep up with, where the company should perhaps stay or reset to like this.  Long-term studies on these people were possible.  Immortality was available through meditation and could be learned anonymously with the text to breasonings algorithm.  However, engaging with accreditation and others helped meditation to remain part of the economy.  Immortals' knowledge was enough to help, for example, through centres.
13.  A primary school student explained that he counted each function as an algorithm.  A meditation-based secondary school encouraged students to do a manageable amount of work with help from others. 
The students didn't need to do all the work because they hadn't graduated from university yet.  However, as soon as they ran text to breasonings or had learned meditation, they needed to do their job.  At most, the work involved writing algorithms and thinking of breasonings.
14.  Philosophy was simple and intelligent.  Immortals could become professors.  Once they had finished the immortality texts, immortals could focus on University areas of study.  But, first, they could study Education and teach.  I had the invitation to teach Business at a prestigious university.
15.  I stayed in Australia until it sunk.  Immortals were capable of more considered thoughts.  They had the experience of many ideas.  Using this experience, they could critically analyse and logically deduce conclusions more effectively.  Therefore, information-based products and low-risk departments and careers were preferable.
16.  I wrote about epistemology (which contained black boxes and observable outcomes) to produce works and teach at the university.  Immortals could write thoughts down to help cope with the amount of them and record them.  The immortal had many ideas.  She wrote and ordered them.  She grouped groups, etc., and wrote with at least ten connections (not just parts) per sentence.  I ranked the details and redrafted the sentences after they were connected.

17.    I examined spiritualism with science.    I equated spiritualism with science.    I found the connection between parts of holistic medicine, i.e. pedagogy, meditation, anti-headache medicine, zinc and vitamin B to combat viruses, text to breasonings algorithm, meditation algorithm, medicine algorithm, creative writing, computational thoughts, philosophical thoughts, time travel, mind reading, immortality, philosophy algorithms, fine arts algorithm, music algorithm, essay helper algorithm, computer interpreter, computer compiler in Prolog, computer compiler in C, business, inductive algorithm finder, bots, sales, replicator, universal translator, simulation, person replicator and animal mind reading.    I connected each of these others to immortality.    Especially within philosophies and algorithms, there were more connections.
18.    I wrote about the actual thing and logical specifications.    I connected immortality to pedagogy.    I did this by breasoning out comments.    Then, I joined them together.    I also avoided stricture.
19.    Meditation enlivens the body and spirit.    I connected immortality to meditation.    I thought. 
I wrote.    I moved.
20.    The overseers gave Bs to headache thoughts and took care of my thoughts.    I connected immortality to anti-headache medicine.    I could time travel without a headache with anti-headache medicine.    I could 
use text to breasonings without a headache with anti-headache medicine.    Text to breasonings automatically met pedagogical requirements of time travel in immortality.
21.    A daily vitamin supplement with 5 As to tone and give energy helped with work each day. 
I connected immortality to zinc and vitamin B to combat viruses.    I had a virus-less system.    I could have vaccines.    I didn't need to worry about mixtures when using the body replacement technology.
22.    The text to breasonings algorithm took care of in a flash of what would take hours.    I did this by connecting immortality to the text to breasonings algorithm.    First, I found the top points using Vedic mind reading.    Then, I used the grammar to logic algorithm to work out extra details about texts necessary for high distinctions in post-graduate courses.    Finally, I breasoned out these texts with the text to breasonings algorithm.
23.    After teaching the people meditation, they indicated meditation and immortality daily.    I connected immortality to the meditation algorithm.    I breasoned out 250 breasonings for each instance of the meditation utterance. 
Text to breasonings required meditation. 
Using 250 breasonings improved the quality of meditation and helped support other meditators.
24.    I also breasoned out immortality medicine each day.    I connected immortality to the medicine algorithm.    The algorithm activated all of the forms of medicine each day with 250 breasonings per person per day.    I would usually activate a form of medicine by itself.    However, the grammar logic algorithm could work on specific 250 breasonings for chosen forms of medicine.
25.    I spent many hours writing each day.    I connected immortality to creative writing.    I wrote arguments, for example, for headache prevention in post-graduate work. 
I could generate arguments for anything a customer wanted with grammar logic algorithm.    I moderated these requests.
26.    I could focus on computer science more clearly and earn high distinctions by writing 80-250 algorithms.    I connected immortality to computational thoughts.    There were automated versions of pedagogy (text to breasonings and essay helper).    There was a computerised version of creative writing (grammar logic).    After writing pedagogy on computer science, I could focus on algorithms in pedagogy.
27.    I filed algorithms required for immortality into different philosophical categories and added to these.    I did this by connecting immortality to philosophical thoughts.    First, I wrote a pedagogy text to activate my writing skills and write other texts.    Second, I wrote other texts, such as meditation and medicine, based on pedagogy.    As a result, I could think critically and clearly and examine thoughts during my life.
28.    Time travel gave me the freedom to be immortal at different times.    I connected immortality to time travel.    I time-travelled daily to maintain myself in immortality (the future) and the present.    There was a community of immortals in the present.    Time travel required mind reading to create a number one music hit, to immortalise oneself.
29.    I was the primary person to customers with person replication and mind reading in immortality.    I connected immortality to mind reading.    I could mind-read a number one hit in each department.    Creating these number ones was an aim of immortality.    I could become a professor in each department in immortality, using mind reading (where I achieved the same result with having 50 meditators with meditation algorithms and using a mind-reading text and the random function) and essay helper to automate work (and workers with replication).
30.    Living like a robot as an immortal in the simulation prevented injury and disease.    I connected immortality to immortality.    I could change to other, safer universes.    Also, I could help others to become immortal and switch to other, safer universes.    I appreciated that immortality was possible with robots, and I agreed with the robot government and living like robots.
31.    In theory, many algorithms can come from an algorithm in immortality.    I connected immortality to philosophy algorithms.    I wrote algorithms for my philosophy to paint, minimise algorithms, edit files online, etc.    I chose these to contribute to larger projects, such as an operating system and an optimising compiler and to save time by writing when walking.    These were part of my aim in immortality, leading to other projects.
32.    I could create graphics tutorials and graphics in programming languages during my career. 
I connected immortality to the fine arts algorithm.    I wrote an algorithm that generated a font that \"joined the dots\", leading to software that pleases the eye in immortality.    I created generative art, possibly with a mind-reader, that was unique for musical albums (for videos and cover art).    I also created graphics for games (i.e. platform or 3D).

33. I connected immortality to the music algorithm.  I wrote the overarching theme of the time.  I planned forward.  I wrote music for my planned accomplishments.  I used it if it was better at the time.
34. I examined grammar and logic in terms of ontologies.  I connected immortality to the essay helper algorithm.  I mind-read people during my career.  I mind-read animals.  I collected details with 50 meditators and the grammar-logic algorithm.
35. I searched for and replaced specific asserted statements.  I connected immortality to the computer interpreter.  I wrote the computer interpreter.  I ran it with itself and the compiler in Prolog.  I detected that its if-then statements worked in my compiler.
36. I continued to develop simulated intelligence, such as moderated business development.  I connected immortality to the computer compiler in Prolog.  I kept adding commands to the compiler, ready to work in C.  I specialised in document collation, algorithm generation and document processing.  I could prepare for neural networks in C.
37. I connected immortality to a computer compiler in C.  I could license the software for commercial use.  I examined brute force and optimisations.  I ran algorithms in C.  These C programs required a Prolog to C converter, with backtracking and variable configuration to points in the C code, no lists (possibly with numbers only, just one-dimensional lists, with memory cleaning on function exit) and memory optimisation and compression.
38. There was a 50 A monthly subscription to business.  I connected immortality to business.  I designed meditation documents for business.  I wrote on sales, bots and business.  I generated a raw mind map.  I expanded it by hand.
39. I searched for old predicates that could do a new task or do close to a new job. Finally, I connected immortality to the inductive algorithm finder.  I finished the predicate.  I corrected the predicate.  I finished the algorithm.
40. There was a traversal metaphor of people the people met for ideas for essays, which they could use. Finally, I connected immortality to bots.  I started being the primary person to people.  I gave them A to be the best in each assignment in each field and B to block this.  I repeated this.
41. I pretended to monetise the algorithm, i.e. serve the tea in a certain way.  I connected immortality to sales.  I found the deal.  I earned a PhD in sales.  I automated finding simple algorithms, matching the student's work.
42. I creatively replicated (modified) my algorithms to write new ones (the program suggested candidate algorithms after working them out in the background while I worked). 
I connected immortality to the replicator.  I found the correct configuration of entity existences.  It was easier in immortality (the simulation).  I could quickly breason out ideas for people.
43. I devised and detected quirks in the universal translator.  I connected immortality to the universal translator.  One person talked to me in English.  Another person was like another person.  I could understand animals.
44. The text to breasonings and grammar logic algorithms were useful simulated intelligence programs and found an interpreter with a neural network.  I connected immortality to the simulation. 
I was aware of objects and settings changing in the simulation. Finally, I met who I wanted to meet.  It was a priority to join the simulation to write better algorithms.
45. There were 4*4*50 As during the child's life.  I connected immortality to the person replicator.  I aimed to interest the child in products before conception.  I met the parents.  If they agreed, I helped the child to learn to meditate.
46. I noticed the ducks were immortal.  I connected immortality to animal mind reading.  I prevented the animals from going towards danger.  They remained beautiful.  I pretended to read their thoughts about qualifications.
47. I wrote the algorithm to find the data to types algorithm based on the expand or simplify types algorithms.  There was more, more, more.  There were more sales subscriptions in more prominent companies.  There were more breasonings for professors.  I worked out the simplest essence of interpreters and helped better.
48. I articulated from any algorithm to an algorithmic aim.  I could do this with any two algorithms I had written.  For example, I wrote data to types starting with a hash table.  It found the items in the state machine more quickly.  It reused items that appeared more than once.
49. I invited others. I defined myself and won awards.  I designed possible award winners.  I created the prizes.  I helped the people try to win the awards.
50. I worked out simplicity was following grammar and explaining.  I was part of the people.  The people trusted me.  I found the people to join.  I built trust and business acumen by helping them.
51. The students could write on and expand the algorithms.  I wrote enough algorithms down.  They were details for the central algorithm. Next, I worked on the main algorithm.  I finished and released an algorithm that showed the business potential of State Saving Interpreter Web Service.
52. I explained the simple method to become immortal, so people could do it themselves and the more extended process with an algorithm to better support them.  The simple way involved meditating, breasoning out 250 breasonings to time travel to 5689 and entering the simulation.  The more extended method included texts to breason out to support one when immortal, a daily regimen with meditation and pedagogy algorithms explaining how to switch on spiritual medicine needed to be immortal.  I added the anti-headache treatment to cope with the large number of breasonings breasoned out by the text to breasonings algorithm to maintain oneself when immortal.  I preferred to have As for requirements and breason out the 250 breasonings when time travelling.
53. I rested to prepare for physical and mental exercise.  I checked each part of my body each day, relaxed and exercised.  I tapped my nerves to energise them.  When I got tired during day-long workshops, I performed qi-gong and jumped in the air.  I looked people in the eye and thanked them.
54. I simplified a three-dimensional polyhedron using a minimisation algorithm.  I moved from strength to strength.   I developed my skills, logically deducing conclusions from them.  Someone could use meditation to use to achieve any good aim.  I recorded my algorithm types politically and thought of new reasons as I travelled.
55. I wrote functionally and used \"sentence-like\" calls (modularised predicates) whenever possible to speed development.  I redrafted the interpreter, noting whether the need for complex workarounds disappeared with a more straightforward design.  I sided with predicates rather than findall.  I incorporated global variables as passed variables.  I simplified codes to ASCII codes to speed sending over long distances in space.

56. I avoided strong types because they were slow and unpredictable. Instead, I listed good programming practices for spacecraft.  I redrafted the code, keeping it simple.  I reused code when necessary. Finally, I enabled programming the computer.
57. Conversely, strong types could help when generating code.  I wrote the strong types.  I bug-tested the code.  I found all possible type statements without explicit types.  I could generate code using the specifications and the types from these.
58. I matched inputs and outputs of bare code mind read during the day and wrote algorithms, turning life into art.  With all possible type statements, I could correct and autocomplete code and use type statements to generate a type of error to help the user correct data type errors.  I notified the user about statements with types incompatible with the predicate and suggested or made corrections.  I autocompleted predicates given the type statements.  Given a type error in input, API input or file input, the program would return an error message and allow data re-entry, possibly with the suggested input.
59. I developed background algorithm generators to save time and provide me with business perks.  I suggested a data structure error when brackets were wrongly present or missing.  I identified whether the problem was the data, the program or the interpreter. I determined issues in data by detecting consistency in specifications.  I noticed API changes (systematically in specifications) made necessary by new features and monitored whether this feature was required, making the data different.
60. I suggested or automatically modified code using previous predicates.  I simplified the complex code to the barest structure, listed inserts in a text file and checked and inserted the call to the code where necessary. Particular inserts refer to certain parts of the code.  The program contained these inserts in passed, not global variables.  I could expand the code, negating the need for the passed inserts.
61. I checked that the changes wouldn't cause problems. For example, I checked that functional calls wouldn't have specification problems.  I checked that code that called the changed code would function correctly. In these cases, I modified the called or calling code or differentiated the code if necessary.  Alternatively, I watched for and assimilated code if possible.
62. I installed a version checker that suggested updating obsolete code with the latest version.  I scanned for missing dependencies.  I checked for changed and possibly affected code compared with the needed version and installed these files as necessary.  I kept data in a separate folder and converted file formats to the latest version, warning of incompatibility with previous versions.
63. I checked that data changes wouldn't cause problems. For example, I checked if the program could handle that data additions or syntax changes.  I found the listed references to the data file and made the necessary modifications.  I found the test data like that that that the user could enter.  I documented this or updated the documentation to help the user enter data in the correct format.
64. I checked that interpreter changes wouldn't cause problems.  I checked that the interpreter could run the algorithms.  In another case, I checked whether the interpreter or algorithm was wrong.  Alternatively, I checked whether the programmer had saved files (and the code was up to date), had updated contingent repositories and that she had uploaded the sandbox. Finally, I determined the data to make public and the data to keep private.
65. I invented products, breasonings for people and actions.  I recommended breasonings.  It was simple to think of the x, y and z dimensions of objects for each word.  One could breason them out, pray, say \"too,\" or use the text to breasonings the software.  Correctly configuring a breasoning system could achieve one's business aims.
66. Details needed to be expanded for theses, helping the grammar.  I recommended details.  With enough details, one could pass a course at any level.  Grammar Logic automated writing sparse details.  However, these were supplements to hand-thought of breasonings, and using only the unique words meant the user needed to run it repeatedly for enough words.
67. PhDs and businesses may need a method to breason out the many breasonings required.  I recommended the text to breasonings algorithm.  It quickly breasoned out the essay, algorithm and breasonings, including their details.  I recommended new users reset the breasoning dictionaries to establish themselves as breasoners better and familiarise themselves with the dictionary format.  The provider gave an emergency breasoning dictionary for medical purposes.
68. I recommended periodically resetting the text to breasonings dictionary and checking that one's algorithms are entry-level.  New breasoners should reset the breasoning dictionary to design their breasonings. 
Generation 2 of the text to breasonings algorithm requires an object name for the word to be entered, followed by its x, y and z dimensions.  Different users may want to enter different objects that are for other words.  When breasoned out, this data will be in the person's memory and indicated by the computer program.
69. I celebrated my 2D art phase.  One should reset the text to breasonings dictionary to ensure breasonings align with the latest objects.  The objects may change with the latest culture, science and technology.  For example, one's aesthetic values may change during one's career.  This skill is similar to checking the grammar of a sentence, depending on the specific words it mentions.
70. I also rewrote algorithms at different times depending on my tastes and experience.  One should reset the breasonings dictionary to ensure that one is familiar with the breasonings it breasons out.  Even if one wrote the whole breasonings dictionary, restarting can help revise words' breasonings.  One may even change the text to breasoning algorithm, determining a word's object based on its part of speech (otherwise, the thing may be symbolic).  An algorithm may find the keyword and breasoning for the whole sentence.
71. It is better to make all code entry-level.  One can check that one's algorithms are entry-level by checking whether these algorithms contain accessible commands and methods and can easily be bug-checked.  It is easy if the command performs a simple function or the user can write it to complete a simple operation.  If the predicate contains more than one aim, the user can usually functionally decompose it into two predicates, each of which will be simpler.  It is simple if it takes a short time and little effort to bug check.
72. I wrote thought-provoking ideas for computer science.  I mind-mapped the idea.  By the 80th breasoning, original ideas had appeared.  I connected the idea to a relevant sen-as version.  I determined the mapping of seen-as reasons to ideas.
73. I used a new method to detect unnecessary choice points and predicates in the interpreter. Finally, I wrote original ideas for computer science.  Most of the time, I wrote thoughts as short and sweet algorithms. Then, I developed a new and more straightforward programming language based on input and output and induction, with a different number of arguments, several commands and a particular logical structure of commands.  This language reduced programs to the most straightforward commands (i.e. if it was an interpreter, then the interpreter modified itself), found the least complex algorithms, and warned against overly complicated code.
74. I wrote about new frontiers of research in computer science.  Mind reading was unique and could be used to help mind-map ideas.  It could be combined with the latest frontiers in research to find viable research topics.  I connected twenty algorithms related to research into a research topic.  The PhD found out, wrote and detailed the algorithms, usually part of a more powerful algorithm.
75. I enjoyed the challenge of types.  The student worked on smaller algorithms during the semester for more algorithms and fewer errors.  The lecturer could join in.  He could support us by writing algorithms like the ones we wrote.  The list of algorithms came from philosophy.
76. I worked on advanced technologies in terms of entirely self-written, reductivist (reducing what the neural network would do into a form that I could do myself), materialisable (sic) work (cognitively rigorous), which explored more of an idea as a human. During the holidays, the student worked on more extensive algorithms to increase his understanding and finish the main projects.  The philosophy was about the main tasks.  After writing the philosophy and some algorithms, the student felt confident enough to write the assignment.  The main project was the book's final part and could be maintained and integrated with future projects.
77. I wrote stories about how applying spiritual holism.  I compared spiritual holism with social movements.  I mind-read those who people thought had died but were in other dimensions, including pets.  I still remembered the missing duckling and wondered how to visit them.  I applied mind reading and time travel to go out and meet people and teach meditation in their language with the help of the universal translator.
78. I connected data to types to mind reading.  I mind-read the data.  I asked for more data, checking it was compatible with the previous data. Then, I computed the types, which helped check the data's correctness and applicability to the program.  I also mind-read whether these were problems, their solutions and whether the data would fit the interpreter's types system and alternatives.
79. I could flawlessly check data types in algorithms during my career.  Separately, I could connect with and help those around me become immortal.  With their permission, I mind-read whether they felt like learning new spiritual skills and thought of them doing them.  It was essential to keep going and finish the skills, then complete the whole course.  I taught the skills with business and education skills and helped the growth of those experiencing the enlightenment.
80. I breasoned out 5*50 As to entice customers during my career.  I used 5*50 As in my meditation organisation to recommend customers buy again or to find a new customer.  I regularly checked if the customer in the database might buy again.  Or I checked around the customer to see if people were interested in becoming a customer. Also, I could increase 80 breasonings to 250 breasonings in the number of As.

"]