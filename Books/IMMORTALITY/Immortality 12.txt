["Green, L 2022, <i>Immortality 12</i>, Lucian Academy Press, Melbourne.","Green, L 2022",1,"Immortality 12

1.  I found the best interpretation of a sentence as an algorithm for a particular use.  I worked out an algorithm from other sentences and an algorithm. For example, the first sentence had the first algorithm.  I worked out how the second sentence had the second algorithm from this relation.  For example, the first algorithm concatenated red strings and the second algorithm concatenated blue strings.
2.  I recommended writing functional algorithms as a mental exercise.  I wrote more extended algorithms.  I could write longer algorithms from the start or join other functional algorithms to form more extended algorithms.  I wrote longer algorithms initially, with the most extended algorithms being interpreters. Then, I added my algorithms to the interpreter.
3.  I critically held data and steps.  Earlier, I wrote an algorithm that simplified more extended algorithms to functional algorithms.  As part of this, I found horizontal and vertical data.  In this, the horizontal data had chains of clauses.  Also, the vertical data had chains of intermediate predicates.
4.  The two points connected in an algorithm were input and output.  For example, the inputs might be a bindings table and a variable name and the output might be a variable's value.  In equals4, I substituted values into the sides, then took out values on unification.  Triangular relationships such as this, the simplest practical algorithms, were desired.  Functionalism was a way of having clearer thinking.
5.  Performing only the necessary computations saved time and space.  I considered writing minimal functional algorithms by collecting data by type.  Rather than a series of transformations, I transformed a single data type.  I changed a single data type, leading to the generation of functional algorithms that prepared data for processing by taking out the necessary parts.  This pre-processing led to XML-style data labels.
6.  I wrote more extended algorithms, such as converters and ssi.c.  I wrote the SSI compiler in C.  This compiler helped compile machine instructions faster.  It was converted from Prolog to C, using a state machine to add C commands.  This state machine could dynamically optimise algorithms.  For example, if always being given 0 eradicated the need for an addition, I removed it.
7.  I completed the preparation for sales.  I wrote 4*50 As for sales.  These, combined with a customer network, enabled sales.  A Master of Business Administration (MBA) helped a customer network.  The MBA was optional, but its main area to support was sales.
8.  I wrote 4*50 As for bots.  These were highly trained bots, I laughed, ready to perform jobs.  They were more plentiful when there were good conditions.  Having more employees was possible when there was more business.  More business was likely with better technology (growth) and relevance.
9.  I organised accreditation for the school.  As part of this, I wrote the course and had it accredited.  I noted that this accreditation honed the medical effects of As.  It also aided imagery.  I could more easily aim for goals with students, i.e. 250 breasonings per product, which enabled 100%.
10. I graphically explained all the algorithms in the course, and the assessment was like a game.  This game was part of writing my business website.  To do this, I imagined a futuristic space console.  I conversed with the video character about the sale.  I made the sale.
11.  I collected data about Jyotish and 250 breasonings about bots' thoughts, and the best time to act.  I wrote the bot's thoughts and their aim to perform well. Then, I wrote the properties of each planet and checked how these affected this thought. Next, I mind-read myself to interpret the horoscope. Finally, I wrote 250 breasonings to guide and support the bot.
12.  The employees required qualifications above a level to teach that level, leading to PhDs.  At the start, I paid trial customers (students).  They tried and gave feedback on philosophy.  They were also satisfied by the computer science professor.  They found it easier to become a professor because of Computer Science.
13.  I wrote more specific essay topics (chapters), including ethics.  I started by writing many algorithms. First, I demonstrated how these algorithms worked in simulations. Then, I assessed the input and output of these algorithms in quizzes. Next, there were well-known questions testing understanding of the algorithms, and students memorised and ran them without a computer. Finally, the teacher tested them on algorithms (in a way, they wrote an interpreter without a computer).
14. I found like-minded people to help me achieve my goals.  I wrote philosophy simply with spiritual and computational, and relevant words.  Simple spiritual words allowed one's lifestyle to be simpler and were part of the institution's aim.  Computational terms simplified the ideas into logic, included miraculous science and were well-known representations of the author and his times.  The efficient version of the algorithm systems had relevant, original connections.
15.  I wrote ten details per sentence.  Both the details and sentences could contain spiritual or computational words.  I considered spiritual or computational terms when not directly used.  I wrote algorithms about the logic of spirituality, including quantum, breasoning and lifestyle-changing algorithms.  These were the unique selling proposition of the academy.
16.  I chose short and scenic links.  I wrote the seen-as-version of the idea.  In the end, I linked each idea to each department.  I connected each idea to each concept.  Sometimes these links contained more ideas, which I added on.
17.  I wrote to prompt comments and inspire imagination.  I did this by writing questions.  I prepared for these questions with possible answers.  I also imagined the possible conversation. For example, I wrote 4*50 As for quantum power, necessary for spacecraft.
18.  I wrote critical content to help check a sentence.  As part of this, I organised ideas into argument maps.  They stored their reused algorithms in one place.  I imagined pressing control-C interrupting a program and asking a student to imagine the ending.  For example, were the data and algorithm correct?
19.  I wrote solving content.  I wrote ideas about debugging and solving complex problems. For example, I shared the idea to start debugging a frame just before a problem in SSI, using List Prolog Interpreter's trace as a reference.  I suggested paying particular attention to commands expected to succeed failing in the interpreter.  I occasionally found problems with the algorithms or how the interpreter ran them.
20.  I encouraged finding 100 algorithms between ideas, for example, in a PhD.  I wrote connections between the concepts.  I actively encouraged students to understand the algorithms.  The links helped students understand the inner workings of the algorithms.  I found including the algorithms made finding connections more effortless and contributed to student research.
21.  I created and solved critical content as an exercise.  I reverted to critical content and helped with connective content as a player when the 5 As for details had run out.  I helped find the bug in an algorithm that connected two algorithms.  I found what the person wanted and gave it to them, as long as it was possible and reasonable.

22.  I worked for myself, writing necessary algorithms.  I wrote an algorithm that took care of everyone's thoughts.  I did this by coming to work.  As part of this, I commented.  I followed up with an algorithm.
23.  I read the horoscope with prayers.  I chose algorithms to write using Jyotish.  Jyotish helped select auspicious work times.  I could tell when it was good to work on an algorithm.  I worked on algorithms that didn't require other algorithms.
24.  The work was finished but had updates for others.  Before this, I stated that an argument should be long enough for an essay.  The argument should be long enough for a 4000-word essay.  The argument should be long enough for a thesis.  Also, the argument should be long enough for detailed, more extended and further work.
25.  I created tools to find unknown, often future-related knowledge.  I  did this by writing thoughtful details about each thought.  As part of this, I made priorities.  I made goals.  I stayed with my first priority.
26.  I redrafted the work by simplifying it, and checking the connections and critical content, for example, problems and solutions.  I rewrote and nourished the text with an understanding of the topic.  As part of this, I wrote and described the algorithm.  Finally, I checked the output of this algorithm.  I also wanted suitable methods.
27.  I found the spiritual or computational algorithm and optimised it.  The spiritual algorithm was education.  Once I had completed it, I could forget it.  I refreshed it later.  I finished the computational algorithm, including all requisite parts.
28.  I wrote illustrative prose and algorithms.  I wrote the algorithm.  I considered the line representing it in terms of life.  I thought of more science if necessary.  Finally, I entered the science of reasoning into an algorithm to check for missing parts, mistakes or a replacement.

29. I kept a diary of thoughts while becoming immortal (even though I thought people thought I died, they hadn't - I appeared alive but kept my youth to myself).  I transformed from mortal to immortal.  I replaced my body each day.  I generated As to help thinking, stop dementia, see clearly and relax my muscles.  There were no medical problems, and taking Chinese herbs for longevity smoothed my experience.
30. I chose whether to die to (sic) Earth (not to).  I decided not to die at 41.  Passing at 41 would have been too early.  I detected the choice from meditation.  I needed to finish my business on Earth.
31. I explained my age-freezing secret.  I chose whether to appear to age to (sic) Earth (not).  My friends would remark that I maintained my youthful complexion and could maintain a young lifestyle.  I liked the look of people who appeared not to age.  They just had more changes in their skin.  
32. I chose never to die, not to die at 80.  I decided my apparent age death (never).  I enjoyed living the lifestyle and helping people live the lifestyle of the future (the best possible quality of life), knowing that people wouldn't want to turn it down and that all people would want to learn continuous improvement.  I joked that I could move around and help more people.  I treated people like people, not just bots with 5*50 As, not just 4*50 As.
33. I negated and won with unsure people, turning a profit.  At the time of possibly moving to the simulation three months after indicating immortality, I indicated to cancel the universe in which I might appear to die with A and stay in the world, not the simulation with A.  I learned this through experience and taught others.  The world is ready for immortality.  It changed to adapt to it.
34. I could continuously work on Earth, taking no risks and developing my style and writing.  I could conduct my business, perform, act and publish.  I could live on Earth, supported to be immortal through the future.  There are simulations to support immortals (accessed through the future).  There is medicine to support immortals (spiritual medicine).  
35. I persuaded people to \"come out\" as immortal and stated that no hindrances to them were necessary.  I realised that artificial memories and changes to my appearance to unnecessarily try to help me to cover up immortality didn't warrant teasing and that people accepted and loved me.  While people wanted to protect me (which I didn't necessarily need), I felt supported and motivated in what I did.  Few but enough people become immortal, so it's alright (it doesn't matter because the future supported it).  People (where no people are bots in themselves) can become immortal and productive.
36. Immortality possibly cancelled dementia from medication and lower life expectancy from night shifts, but I didn't have to accept death as a representation.  I wondered whether I could live on Earth for longer than 80 years, and I could.  I could live for however long I wanted.  I never touched death.  I moved around and worked in many roles.  The simulation protected me from death, but I didn't want to take risks that would cut me off from people.
37. I encouraged scientific studied on immortality and observed possible examples of immortality.  I queried how to help my business after \"dying\" and thought to turn off death and help from afar.  Helping from afar, in this case, meant not dying.  It meant helping with the business in person.  In effect, I could act as the director of my business for eternity.
38.  If everyone became immortal, society's structure would change (there would be fewer medical problems, time travel to simulations and space travel to have more children, if this was necessary, and economics would function peacefully).  The end of the universe wouldn't be a barrier because of the simulation.  There was no need to pretend to die, and the world would accept immortality and high quality of life with the help of a future robot-led civilisation.  I learned to meditate, breason ideas out, breason ideas out on the computer, time travel and learn immortality from a future civilisation.  Immortals were not magicians but benefited from the science available in our times.  Immortality was a property of our universe.
39.  I could tell people about my experiences and knowledge, and they could benefit from it, and I decided to open centrally-operated centres in all countries.  I explained my algorithms and epistemological knowledge.  It was open-source, so people could privately access it, and it was transparent.  The \"religious protection\" meant nothing, as immortality resolved positively.  Someone asked how can I do it, and I answered with spiritual meditation (and my writing).
40.  I explained to look up my writing and algorithms.  My skills and knowledge came from writing enough on Pedagogy, Immortality, etc.  I meditated (wrote) about what to write about while living.  I thought of many topics to write on.  I also programmed creative topics or topics that were advanced topics for our times.
41.  I examined and researched possible issues during meditation while I remained aware that I could complement meditation with improving science and technology in the future.  I decided to streamline people's meditation experience, particularly preventing headaches and psychological issues while transitioning to becoming immortal.  I learned that I could avoid headaches with meditation (writing).  Because immortality was positive, there was always a positive outcome.  I also learned that computation pedagogy (with word breasonings) was necessary for studying for a master's degree.
42.  I overcame bullying and enjoyed life without overhanging negativity.  I thought people could benefit from immortality and being in the world.  I encouraged people to move from strength to strength, claim a lively place in the world and continue being successful.  The world offered well-knownness and enjoyment, and immortality lengthened and emphasised this.  Nothing was missing that was needed; I could explain everything by reason and science, and I remained present.
43.  I chose radicalism in continental philosophy.  My unique selling proposition contained breasonings, a spiritual idea that I activated with 4*50 (word or sentence) As per chapter, and enabled immortality.  I not only wrote 4*50 sentence-type As per department but 4*50 word-type As per chapter.  Writing more per chapter required additional concentration and resulted in a cosmological achievement-additionally, 5*50 (word or sentence) As was the \"top\" and achieved the copywriting standard.
44.  Computational breasonings require the lecturer (choosing, not having someone else decide what to breason out for you), recordings (replicating breasoning through other times and medically supporting computational breasoning), medicine and delegate possibly headache-causing workloads with spiritual medicine, philosophy and creative writing skills, among others.  I imagined that people could generate breasonings with or without computers and that philosophy students could memorise algorithms.  I preferred to create breasonings with a computer, automating writing high distinctions and opening up the possibility of future technologies being available in our time.  Not only were breasonings necessary for healthily conceiving a baby, but they made immortality and permanent good health available.  I regularly held Prolog-based fairs of my algorithms to demonstrate them.

45. I created and checked ideas. I wrote an algorithm that verified that words in the key sentences were words from the argument. The argument contained words that linked to each sentence. The first and second sentences in the paragraph were the key sentences. I used mind-reading (similar to generative art) to make smoother choices of words to replace.
46. I wrote algorithm specifications that weren't too difficult to understand, were valid and usually didn't require other algorithms. The non-key sentences were transformed into nothingness terms, for example, self and other. The rest of the sentences in the paragraph described the algorithm. Often, the algorithm indicated could be a computer science assignment. Students would attempt to solve the problem with their solution.
47. I devised my lexicon, for example, using computational terms. Alternatively, I replaced the key sentences with nothingness versions of words from the argument. These nothingness words are \"point\", to be hand replaced with \"event\". One should start with \"event\". The writer may replace these with groups of related words and mind-reading before grammar checking.
48. I contracted the sentences or expanded the sentence. I wrote an algorithm that found the first relevant functional difference between sentences. It chose a short phrase from each sentence with mind-reading. Then it connected them (thinking of but not including a fleshed-out example). Then the author rewrote the original sentences.
49. I numbered the fifth sentence about a replacement. The algorithm displays the argument replacement sentences sentence 1, sentence 2, not word 1 x word 2 x word 3. I chose the sentence with the needed parts, making any changes as necessary. I didn't insert past corrections to choose between within sentences because these were hard to read. For example, I thought \"5\" looked like a sea horse, whereas \"4\" looked like a horse's head.
50. I noticed that the winner had breasoned out 5*50 As per sentence. I wrote another algorithm that wrote 5*50 As of Grammar-Logic details per sentence. It also breasoned out As for connections. The algorithm maintained records of the number of breasonings breasoned out and the date. I could use 5*50 As for business and copywriting because this was the copywriting standard.
51. I simplified the assignment to a worksheet that students could complete on the computer. I published essay formats separately from the chapters. I checked the chapters against the essays written about them, making the chapters clearer if necessary. I wrote secondary texts about a chapter to help explain it. I replaced words with unusual words, accounting for particular ideas.
52. As an alternative to written assessment, I established an academy where students discussed ideas. I described the concept. Then, the participants took turns discussing the idea. They thought of simple argument maps. I mind-read the approximate replies of people, grouped them and traversed them during my argument.
53. I included recursion in the interpreter with individual projects. I wrote simpler algorithms suitable for assignments. These algorithms were long enough. However, they were not too complicated. They were perfectly programmed, derived from relatively more complex other algorithms.  
54. I wrote ten details per line, connection and more, using mind-reading and functionally decomposed algorithms. These details were algorithms. Writing ten algorithms also applied to products. It also applies to central ideas in an essay. I also wrote 80 philosophy breasonings.
55. I could reuse the functional algorithm and change how I used it and its parameters. Before this, I wrote the functional algorithm. This functional algorithm had a single function. It eliminated unnecessary code and mistakes because of having a single function. Contrary to some, writing wasn't more complicated and didn't take longer to write.
56. I reinforced the usability of texts. I worked out the algorithms and algorithm details before redrafting or removing them. I encountered fascinating thoughts when I functionally simplified the algorithms. Next, I smoothed terms and arguments, opening algorithms to readers and highlighting their relevance. Finally, I diluted most of the text for readability and consolidation.
57. I just did it myself first. Algorithms need to be simplified to, for example, five functional parts (representing the algorithm). I arrived at these parts by simplifying the logic. I also simplified the data. I repeated this if necessary.

58. I wrote a Learning Content Management System in SSI Web Service (SSI-WS). It was a mixture of algorithms, not just SSI-WS, and used text file editors to manage data. It contained forums, lessons and assessments. It needed to be accessible to disabled people. I helped disabled students with software.
59. I sped up SSI-WS to work with multiple-page course sites. In my List Prolog and State Saving interpreters, I made the spelling of the string concat and member commands uniform. I kept \"=\", not \"equals4\" in the Prolog to List Prolog converter. I redrafted the converter's handling of lines, variable names and single command cuts. I fixed the bug with multiple calls to a function and cut in List Prolog Interpreter.
60. I saved progress over different windows in SSI-WS, including saving progress if a window was closed. If a student made changes in one window, they could load these in another window. These windows had different session data. One needed to be aware that one session could overwrite another session's data. To prevent overwriting data, I checked that data wasn't going to overwrite other data in each session.

61.  There was a single login for quizzes and student administration.  There was two-factor authentication using email.  SSI Web Service contained the whole website in a single algorithm, so students needed a single login for the entire site.  When students log in, they can visit any part of the site.  If the student wasn't logged in, they could see any public part of the site within SSI-WS and then log in.
62.  I didn't need to log in with cookies if I was already logged in before a time limit.  I logged in and stayed logged in, in different windows.  I returned to the GET form method, allowing me to copy and paste URLs for specific pages.  The algorithm saved data by changing it on the server rather than in variables in the algorithm.  As long as the algorithm collected garbage after closing a predicate (speeding the algorithm up), the single SSI-WS algorithm made testing and a single login possible.
63.  I redirected the user to the first page if they opened the landing page or sent them to the URL in the GET form method.  I wrote an AI word-guessing player.  It guessed from a list of words and recent words and detected cheating if either player used recent words.  Finally, I wrote a solid-block maze in Prolog in HTML, using Javascript for get_single_char.  It was a 3D maze, with different levels visible at the same time.
64.  The person established a company to buy products, increasing quality with testing and allowing others to buy many products.  This company bought products to try.  It also recruited students from various places.  In addition, It organised scholarships for them.  It subsidised fees.
65.  I kept writing, and solving spiritual science, for example, spiritual computers.  I wrote As with neural networks.  I wrote an algorithm to help me understand the creation of the algorithms and logic.  I sensed the urgency with a backlog of algorithms to write.  And students and staff needed As.
66.  I used previous algorithms as helpers and wrote algorithms for institution assignments.  I took action and did work when I wanted.  I avoided stricture but came up with ideas about each thing.  I set up issues (to-do lists) for algorithms.  Also, I generated other possible algorithm specifications using different algorithms, solving problems myself.
67.  Higher education was similar to VET, and I thought of more thoughts.  So I wrote an assignment to be vocational education and training (VET)-like assessment.  After writing 250 breasonings, the rest fell into place.  The helpers needed a seen-as version of trains moving thoughts into position before being thought, funnels and harmless interpretations of possibly radical ideas.  VET did all these for 250 breasonings.

68. I wrote the contract with the company, different from a computer science student agreeing to do the work. Separately, I set the computer science assignment. I wrote the philosophy. I explained shortness in terms of longness. I concluded there is nothing else to a quantum conclusion, the top in our time.  
69. I inspired other algorithms. To reach the proper logical standard, I wrote ten algorithms and 80 philosophy breasonings. I wondered whether it would be the top in the future. I then asked what caused it to work. Does the universe naturally form divine forms? For example, long arguments containing perfect ideas are divine.  
70. I breasoned out 250 breasonings in philosophy to earn 100% (like 100% correctness from deleting the record of a finished predicate or allowing the same predicate to be concurrently run). There were 250 philosophy breasonings and 250 algorithms. I prepared for each assignment in this way as a professor. I wondered whether future science was further down the argument with perfect programs. I allowed the same predicate to run concurrently.
71. I worked on the algorithms instead of asking the future computer to work on them to aid my understanding. I collected garbage by deleting finished predicates. I recorded the state of variables after finishing the predicate. I deleted the record if there were no choice points in it. I asked, what more developed time travel is available?
72. * I replaced \"n\" and \"v\" in List Prolog with \"&\" and \"^\", respectively.  I considered \"predicate name\" and \"variable name\", or \"system name\" and \"system variable\", but these would take too long to type.  I could change them to \"predicate name\" and \"variable name\" later because I would write the code in Prolog, not List Prolog, at first, and the longer names would only be visible to the interpreter, not the user. I converted any instances of \"predicate name\" and \"variable name\" to Prolog, not List Prolog, if they were visible to the user.
73. I wrote the Learning Content Management System (LCMS) in State Saving Interpreter Web Service to help earn 100%. I used the LCMS to teach Prolog. I explained the commands. I gave the question. I checked and returned hints about improving the answer.
74. I introduced myself and discussed the topics. I did this by establishing a profile page and multi-dimensional forum. I started with the top. I could go up or down. Vision-impaired people could use the browser or navigator because it had a feature to print all levels.
75. I searched with the vision-impaired browser. I began by editing the post. Then I viewed the post. I could also search for terms in the post. Finally, I could search my philosophy for conjunctions of terms.
76. The students could verify and submit programs however many times they wanted. To allow this, I made automated programming assignment verification and submission algorithms. These algorithms helped increase grades. Indirectly related to my logic studies, I attended the International Logic Summer School on a scholarship. The prestigious institution appointed me as a logic tutor.
77. I sent the student's grades and financial information to them. As part of this, there were messages on the system. The students logged in to read these messages. There was also an email notification when there was a new message. Each message had recipients, a subject and a body.
78. Students could download resources to complete work. These resources were on the LCMS. First, I wrote the source. Second, I uploaded it to the LCMS. There were also a unit outline and assessment information on the LCMS.
79. The students could submit essays (and play ten types of games). They wrote the articles. They pasted the paper into a text file. Finally, they submitted the text using a form. The lecturer marked this essay and commented on the clarity of connections (with ontologies).
80. I wrote as the point of immortality. As part of this, I checked the essays for similarity with other articles in the database. I also checked whether they correctly cited the source. I checked the essay format, including the title, introduction, exposition, critique, conclusion, citations and references. I also checked that the writer had had ten words or fewer per quote and that they had adequately paraphrased unquoted excerpts.


"]

