["Green, L 2024, <i>University 2 - 1</i>, Lucian Academy Press, Melbourne.","Green, L 2024",1,"University 2 - 1

1. The lecturer listed the commands without output to preserve in Lucian CI/CD, such as close/1. I found the types for the algorithm. I found the list, string, number, atom, blob, variable, predicate and type types. I proposed that each of these be put in terms of the number type. There were integer and floating number types, converted to each other depending on the number.
2. The lecturer listed the hierarchy of types, including “or”. I verified that the tests were compatible with the types. The test was \"a(1,2,A). A=3.\". The type was “a(number, number, number).”. I verified that 1 was a number, 2 was a number, and 3 was a number.
3. The lecturer corrected the incompatible tests. I listed the compatible tests and produced errors about the conflicting tests. All the arguments in the test had a type. If one of these types didn’t match a type statement, there was an error. Types could specify hierarchies of commands and lists.
4. The lecturer wrote a grammar of the programming language. I wrote types as a single statement, including “or”. The single statement was instead of a hierarchy. I wrote “and”, “lists”, and “or” in the hierarchy. This single statement avoided the need to name reused types. I used a grammar.
5. The lecturer shortened the grammar, listing different endings together. I wrote nested commands in the hierarchy of types. For example, \"predicate_name:rounded_list(variables) :- commands.\", where commands=\"command, commands\", command=\"findall(-,commands,-)\" or command=\"halt\", etc. I combined the types from the algorithm into one hierarchy. I found the parts which were supposed to be called the same but hadn’t, and did.
6. The lecturer found the grammar and formulas to produce the input. I grouped the recurring types. I examined the code producing the string. I preserved the lists of characters converted to strings from findall. I kept notes of properties, saved as separate formulas, to produce tests.
7. The lecturer constructed the type (1 or “1”), two and the test 1,2. I made a hierarchy of types containing disjunctives. The example “a:-b, number. b:-string. b:-number.” gave the hierarchy. The single statement was given by the example “a:-(string or number), number.”. The example gave a formula, “a:-(number a or string a),number b. {b is a+1}.”.
University 2 - 1

8. The lecturer could customise the middle item's variable, formula or constant. I wrote intermediate types to define types with the same beginnings and ends but different middles. For example, I wrote a=string,b(c), b(C)=string,C, and c=number. The beginning was a string (x). The middle was a string (y). The end was number (z).

The lecturer processed the data in bulk.

9. The lecturer claimed that Lucian CI/CD identified and suggested solutions to problems in code. I wrote and applied large data sets to algorithms to test them. For example, I tested Lucian CI/CD with non-predictable GitL data. Lucian CI/CD generated tests for Lucian CI/CD and wrote non-predictable code. I wrote the code for the test.
10. The lecturer surpassed and became the best. I tested the interpreters, CAW, neuronetwork, program finders (including program finder, data to algorithm and program finder with types), an algorithm to types and tests with many algorithms as data. I assumed the algorithms would work together using the same data and used them together. I assumed the underlying systems would be there and wrote mine. I determined the system of the algorithmic data, including commands and the logical structure of their programming language.
11. The lecturer tested the code for the spec. I wrote the neuronetwork for an educational audience. It prepared students to complete work, explained its limitations and listed multiple possible answers. I worked on how to complete algorithms with it. I broke the problem into predicates and data and worked bottom-up.
12. The lecturer saw physics simulations as a priority. The neuronetworks contained enough data after a certain time. They weren't afraid of applying new ideas to ideas. Materials with new properties could be tested in the science simulation, and new computers could be created. Physical science was reduced to computer science.
13. The lecturer developed 4*50 As for a single advantage. With more data and better technology, I could move faster. I finished more features more quickly. I could write better features with more knowledge. The natural expectation for better computing power demanded speed.
14. The lecturer wrote viable ideas. The single advantage was pedagogy and reaching foreseeable benchmarks. I became immortal. I ran a business. I invested in meditation and spiritual medicine education.
15. The lecturer developed content and form algorithms. I expanded the brackets and worked out the problems individually. I completed fundamental tasks from the first principles. Using brute force, I worked on the ground, not in the air. I compiled solutions into a decision tree.
16. The lecturer wrote 4*50 high distinctions to provide the technology for the organisation. I bug-tested algorithms with combinations of data. The speed level was complete. The perfection level was complete. I coordinated points of view politically.
"]