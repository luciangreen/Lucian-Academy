University 2 - 2

1. The lecturer deleted quantum algorithms from the quantum computer afterwards or didn't need to because it was a quantum simulation, where electrons remained instead of disappeared or instead disappeared. I devised a mind-reading quantum computer that mind-read strings and subatomic particles from string theory to have correct results, giving the output to the classical computer. This quantum computer could make computations instantly, making simulation, space travel, and immortality possible. The configuration and necessary computations were preclusive. However, a time machine was already possible with a classical computer. I programmed the array of lock-entangled particles to give the emergent effect of a circuit.
2. The lecturer stated that Spec to Algorithm (S2A) could represent recursion using [maplist,_], [foldr,_] or similar. S2A uses the rule [is,[*]] to find substrings using two appends from "[is,[1+1]]" to write interpreters with calculations as part of strings quickly. Instead of using subterm with address to find and replace a subterm in a term, the algorithm found the string where "*" was in the pattern in the string. Then, after evaluating it using term_to_atom and is, it replaced this with two. The interpreter's predicates, needed formulas and recursive elements could be constructed using S2A.
3. The lecturer mind read the string. It had an address and momentum. It was there in between, but the instruments of the observer might affect it. I wanted to know if Text to Breasonings could control gravity.
4. The lecturer accounted for the subatomic particles, programming one of them like a crystal with 50 high distinctions to return a frequency, suggesting the ability to create a DFA with substitutions as transitions. I mind read the subatomic particle, the model boson and the fermion in superstring theory. The simulant lived in another universe with its physics model; they were safe from the home universe ending, accidents, threats or medical problems, and it continued appearing like the home universe. Bodies, simulations, quantum science, and research-based teleportation medicine were used. I teleported the subatomic particle in its object within bounds, and everything, including computers, was simulated, even with a neural engine.
5. The lecturer said the quantum computer needed to work because it was good. The particle's friend was close to it and could be used more efficiently to create a network because of the electromagnetic field. I programmed the desired results and negative (failing) cases, expecting the particles to spiritually follow the S2A algorithm, similar to programming a crystal, even if multiple particles helped the particle to achieve the result. They are naturally intelligent, with consciousness. They worked on a best of three trials more quickly than a computer because they were smaller.
6. The lecturer found algorithms like AGI using CAW for shorter solutions, mainly simulation. I temporarily entangled and locked the neighbouring particles to connect to the computer. I mind-read the specific frequencies of the particles, like a person, to check if they were there, ready with instructions and rewards such as a beep, each with 50 high distinctions. I then conducted the twenty-minute experiment, giving the computer components a break to avoid fatigue. I read the result of the quantum simulation using the classical computer, replacing S2A with CAW to find results after twenty minutes, after optimising types and patterns.
7. The lecturer unlocked the breasoning values and removed the breasonings after use. In the quantum computer, I locked breasoning values, of which there were only x, y and z, to get the particles' attention. They had small communities at their level of resolution and enjoyed helping. They had privacy and levels of involvement and were equally spaced. They were left as they were found.
8. At the end of the five minutes, the lecturer showed the particles the movie of the computation involving thousands of particles and left them alone for the day or maybe forever, depending on their comments, two visits maximum. Still, it was virtual, so we could do what we wanted. I had a 2D map of the particles. I collected their comments on the 50 high distinctions at each step of communicating with a particle, with Hollywood accuracy (giving a film set high distinctions for the imagery to be high quality). Everything was copywritten using a free algorithm, including their responses, and they helped.
9. The lecturer visited other places to explore and met a professor they knew. The simulation is necessary for people to exist in the same space simultaneously. There was enough food and resources for everyone. I had the same quality of life as before, appearing in the apartment and walking outside. Everything looked the same as the home universe.
10. The lecturer only visited safe planets. I commented that Ancient Romans, car travellers, or even room occupants could travel through the universe, quickly arriving before going to the toilet. They had high distinctions and travelled between Melbourne and Sydney, in other words, other planets. When recognised as myself or the apartment occupant, I could hire a car and automatically travel, planning to arrive home before the end of the day. I visited one planet, then returned.
11. The lecturer enjoyed the high quality of life, breasoning their high distinctions over an extended period. The simulation is a phenomenon to discover, just as crystals can be programmed with algorithms. I was more forceful, guiding the people to safe places and indicating that they should meditate and replace their bodies. One of the only differences was the difference in people on the street (sometimes obviously human animals and robots), where cars, clothes, and shops were the same. If someone just joined a simulation, they met non-simulants for the first 16 days.
12. The lecturer used variables to develop algorithms with S2A quickly. S2A specs could have variables (e.g. [a,b,c,'A1',d,e] or "abc<A1>de"). These variables had the same format as Prolog variables or started with a capital letter, then had 0 or more other letters and numbers. These variables prevented the need to enter two or more specs to cause variables to be formed. It was assumed the non-variables were constants.
13. The lecturer built an optimised machine from quantum particles. In S2A, I detected the same or a subset of the data and made an optimisation. I optimised the S2A specs by detecting if a repeat was a repeat of n characters, whether recursions or predicates could be merged and whether the same data meant an optimisation was possible. It could be omitted if a recursion added 0, multiplied by 1, concatenated "" or appended []. If two predicates decomposed and built the same list, they could be merged.
14. The lecturer gave only the correct results using the algorithm generated by S2A. I fixed the result of the generated S2A algorithm by using the map corresponding to the output in the decision tree. When selecting a map from the map list, it should have the same index as the output, particularly the clause number, found with subterm with address. This method prevented the algorithm from unwantedly finding incorrect results with a map for the wrong clause. For example, the map [A,B,c]->A had a different result from [B,A,e]->A.
15. The lecturer gave non-deterministic results for an input with more than one output. I gave non-deterministic output in S2A by inserting "nd" (standing for non-deterministic) in the output. For example, [a,[nd,[[b],[c]]]] produced [a,b] and [a,c]. The algorithm removed "nd" and produced these results as separate outputs using the Prolog command "member". Non-deterministic results were formed when specs differed in the output in the decision tree.
16. The lecturer reduced formulas over multiple rows and columns to a repeating pattern to recognise data with different numbers of rows and columns. The next generation of Spreadsheet Formula Finder (SSFF) finds values in the same row or column and their sum, difference, or multiple in some reports. It used a variant of Spec to Algorithm to collect and form output from input by recognising variables in tables and entering and calculating formulas. SSFF can automatically find these formulas using a formula finder. Other formulas, such as string to table converter, converted input to terms, "group by consecutive number", converted strings to terms with values to find formulas, and S2A found output from the input using the correct format.