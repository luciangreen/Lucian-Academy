["Green, L 2024, <i>New Sales 1</i>, Lucian Academy Press, Melbourne.","Green, L 2024",1,"New Sales 1

1. The salesperson sold one of several plans with value. I sold it for the best price. I found the potential buyer. I discussed the possible prices. I sold it for the highest price. 
2. The salesperson made money from advertising. I bought newspaper advertising. I chose the newspaper. It targeted my demographic. I targeted this demographic.
3. The salesperson's vision was to write on pedagogy. I conducted a sales campaign. I chose who to sell to. These were my ideal clients. They shared my vision.
4. The salesperson interested the buyer in all industries. I held an auction. The auction enticed the bidder to bid. The price looked suitable for the product. The buyer bought pedagogy because they needed it, and the seller sold pedagogy reasonably.
5. The salesperson creatively wrote the price. I sold it for a reasonable price. The buyer compared the product and price with others. They selected one with precisely the features they needed and which suited their budget. The price included the cost and was relatively low.
6. The salesperson could convert data files to HTML files. I sold overseas. I looked up laws about tax in different countries. I kept receipts. I customised materials for other cultures and language speakers and made them accessible.
7. The salesperson sold to a previous buyer who shared values with the company. I sold to a buyer prior. She preferred to type it in rather than use an algorithm. Typing it in was faster. In addition, she could debug it faster.
8. The salesperson was dignified as he gave credit, with good reason. I gave credit. I thought, \"Good\", so I provided a refund with credit. I gave it as expected. I used my neurons to create the solution.
9. The salesperson was professional when giving a refund. I gave a refund. The client may have a faulty product. Or the client may not need the service. Finally, the product may be wrong.
10. The salesperson understood the student's reasons for applying for credit. I set the time limit to use credit. The time limit was twelve months. This time allowed the student time to spend the credit. In addition, they would be likely to spend it in this time.
11. The salesperson gave the creditor the voucher. The credit holder gave it to someone else. The student gave the credit to a friend in exchange for a coffee. They were returning the favour. It was deemed ethical.
12. The salesperson wrote the voucher code, keeping a record of its value. Then, I sold to the credit holder. The previous credit holder bought the product. First, they used their credit to purchase the product. Then, they used the remaining credit to pay towards another product, or they paid the difference.
13. The salesperson agreed on the price with the supplier. I paid the supplier. I paid the supplier at the time of the contract. They supplied the goods. I checked there was nothing wrong with them.
14. The salesperson had a good track record and was interested in the latest product. I chose a possible buyer. I found the buyer. The buyer had the money, was the decision maker, wanted the product, and it was the right time. I agreed on the product and the price.
15. The immortal did the readings but had a mentor for specific advice. I sold in a commercial setting. I was professional. The buyer had good experience. The product was professional.
16. The salesperson sold their employment to the company. I paid employees. They were paid fairly and were also employed if they were disabled. They had no wage theft or secrecy in their contracts. The company paid them the correct rate and did not dismiss them illegally.


17. The salesperson advised on selling the company. I sold the company. The valuer considered the assets which generated profit and the liabilities or costs as part of the valuation. This valuation included long-term viability. I improved my sales, timed my exit, and found a third-party business broker and qualified potential buyers.
18. The salesperson produced reports for a fee. I consulted for companies. I helped streamline tactics. Or I helped increase profits. 
19. The salesperson sold the report. I sold my management consulting knowledge. For example, I removed unnecessary elements from the plan. Or I recognised revenue streams or expenses to reduce to maximise profit. Or I determined which activities and processes added value, or I added value or fixed problems or followed the problem-solving process.
20. The salesperson negotiated the price. I sold it for a fair price. I suggested a price. The buyer indicated whether it was too high or too low. I agreed with the changes.
21. The salesperson needed money. I sold someone's goods. I identified the goods. I agreed on a price. I accepted the money.
22. The salesperson checked product prices individually. I sold a product for a similar price to another product. The two products were the same value. I sold the other one month before. I checked whether other factors influenced the price, such as product cost, product usability and wantedness, competition, government and legal rules, pricing aims and marketing.
23. The salesperson made the sales decisions. I represented the seller. The seller was the decision maker. I negotiated a price on their behalf.
24. The salesperson sold the grammar logic algorithm in mint condition, similar to a generative algorithm writer for naming and formats. I sold a similar product. The product had similar cost, usability and wantedness, competition, government and legal rules, pricing aims and marketing. It had the same function and appearance. It might be a generic brand.
25. The salesperson researched and delivered the answer. I determined that a buyer needed help. I read the message from the buyer asking for help. They wondered what condition the product was in. I gave them the answer.
26. The salesperson inspected evidence for a financial position. I sold to a buyer. I advertised to possible buyers. I talked with them. I sold to one of the first ones for a fair price.
27. The salesperson determined that a sale was necessary. First, I advertised to prospective buyers. Second, I found public newspapers or websites which could display advertisements. Third, I found the best price for the ad. Finally, I interviewed the prospective buyers.
28. The salesperson valued the product and checked for legal problems. Then, I gave the price to the buyer. First, I valued the product by possible profit. Then, I wrote the price in a report. Finally, I delivered it to the buyer.
29. The salesperson leveraged research and development. I brought back an old product. The old product was competitive with the new product. It was popular. I calculated that it was in demand.
30. The salesperson responded to the demand for an old product. There was interest in an old product. The old product was a portable version of an existing product. Or it contained features that I could bring back. Or, it supplied a feature that a change demanded.
31. The salesperson needed to cover costs. I compiled possible prices. I considered product costs and what the buyer was willing to pay. The cost could influence the price. I listed the components and total package prices from lowest to highest.
32. The salesperson asked shareholders whether they wanted to receive share value or dividends. I gave the profits to the shareholders. I paid the costs. I divided the franked dividends among the shareholders. The shareholders choose whether to receive share value or dividends.

33. The salesperson sold for a reasonable price. Next, I sold old goods to clear them. First, I checked that the old goods were in proper condition. Then, I advertised them for sale. Finally, I sold them to an early buyer.
34. The salesperson prepared for the next sales cycle. I could use the money from sales. I invested the money from sales. There were some costs. I spent money on wages, accreditation and computer expenses.
35. The salesperson worked on open-source software. First, I checked the cost (how much it costs to manufacture). I explained that the cost was the cost to manufacture, and the price was the price to sell. Next, I checked that I had enough money to manufacture the product. Finally, I supplied enough information products.
36. The salesperson and customers were necessary. I checked the price (how much the salesperson would sell it for). I found the price based on the cost. I also factored in the competition's prices. I also considered ways of making money to cover other expenses.
37. The salesperson read all about the person and their strengths. I checked the product's sales. I checked the unit sales for the period (where unit means the product). I monitored the sales and saw ways of helping. I put on more staff, helped with customer service and helped with supplies.
38. The salesperson memorised and checked service criteria. Then, I gave the task of checking to the appropriate person. First, the person checked the product quality. In addition, they checked for enough supplies. Finally, they checked the premises were tidy and well-presented.
39. The salesperson undertook training. I priced the product. As a seller, I also bought supplies. I priced the product based on the cost of the supplies. I was aware that a professional buyer needed training.
40. The salesperson sold more prize-winning products. I entered the product in the competition. First, I found the appropriate category in the competition. Then, I entered the product in the competition. Finally, I tried with the entry and recorded the result.
41. The salesperson discussed the question with the manager. I conducted business to help a person. I settled on the person to help. I discussed their needs, such as an education product. I taught the person, and funding covered the cost.
42. The salesperson collected the sales points, the most rigorous philosophies. I competed for results. I wrote the most rigorous philosophies. These included many simple algorithms. It was possible to discuss a simple idea in the essay about them.
43. The salesperson checked the overall necessity of the project. I checked the product. I checked that all the students in the class were familiar with all the commands in the algorithm. Then, I tested whether they could work out the combination of commands themselves. If there was a specific requirement in the project, it needed to be both different and necessary looking enough.
44. The salesperson listed the performance criteria of the test. Then, I tested which product best achieved the result. Next, I recorded the candidate products. Then, I tried them against the hypothesis. Finally, I scored and ranked them.
45. The salesperson found the wording of questions, the question format and the feedback format that the customer responded to. I tested what customers reacted to. The customer's needs ranged from sustenance to intellectual and personal. They required intellectual stimulation in the form \"What is it?\" rather than \"Is it right?\". The helper algorithm, written by the student, got faster as it automatically translated staged output and input into code.
46. The salesperson made a 3D sales pitch game. I experimented in the sales lab. First, I wrote the movie and 3D game generators. I started with 2D bitmap graphics. Then, I focused on the characters' 3D models and how they moved. Finally, I made a 3D educational game in which players moved around mazes, making maps on pieces of paper.
47. The salesperson spent on the new technology. I checked the use of money. I listed the uses for the money. I took out unnecessary costs. I spent more on sustainable products.
48. The salesperson helped contribute to costs. I checked the rate of spending and saving. I spent $A. I saved $B. The return on my savings helped pay for my costs.


49. The salesperson and customer listened to each other's specification and answers to frequently asked questions, respectively. I reacted to customers. I listened to the customer's specification for what they wanted. I estimated delivery. I delivered the product.
50. The salesperson helped the customer with buying, using and possibly returning the product. I wrote the answers to the frequently asked questions. I listened to the customer's question. I wrote the answer. I wrote answers to frequently asked questions for others.
51. The salesperson checked the function, user friendliness, feasibility and cost of the product. I conducted product research. I found the specification. I built a prototype product. I tested the product with people.
52. The salesperson also checked the tim and cost of testing. I investigated the feasibility of the product. I checked its development time. I checked its manufacturing time. I checked the cost of development.
53. The salesperson modified the test reader to work in other languages, such as with standard out (output to the terminal window) in C. I researched the competition. I experimented with converting non-Prolog source files into List Prolog to procure commented-out tests. This was possible in C, etc. I could modify the test script to run the tests in the interpreter in the other programming language.
54. The salesperson tested code in other languages. I wrote the code in C. I wrote the correct output in a file. I tested that the program's output and the correct output were the same in Shell. This program was in Prolog.
55. The salesperson wrote the neuronetwork to work out algorithms and breasonings. I competed for sales. I pitched to the client. The client chose one of the salespeople. This was a round-robin tournament.
56. The salesperson wrote the command line option more memory for the interpreter. found the short-cut neuronetwork that really found the if-then relationships in the data. In fact, I found the thoughts of the stone. I wrote down As from the perspectives of the crystals. I critically analysed the animal.
57. The salesperson sold meditation classes to school, gyms and industry. I checked for prospects. I listed the methods of contact. I listed the prospect. I contacted the prospect.
58. The salesperson was bigger. I considered promoting my immortality time machine. It worked for meditator-pedagogues. It was essential in the army, psychiatric wards, hospitals, workplaces and universities. Some preferred to work towards it.
59. The salesperson checked for qualified leads. The new immortal was over forty. They could do the pedagogy later. The child was too young. The animal worked, but more should be done.
60. The salesperson cared for and got on well with the inanimate. The rock was left out. However, the play, the oeuvre and the magna opera were done. I tested the music. I visited number ones in time.
61. The salesperson remained above academia. I competed by checking. I caught up with thoughts per student per day of the years. I caught up with qualification assignments, and to an extent, thoughts during the qualification. Writing came at a premium.
62. The salesperson wrote the algorithm writers with the same code and different inserts. I segmented neuronetworks by chapter and algorithm. I meant algorithms by philosophy. And I meant algorithms with simply expressed specifications by algorithms. There were algorithm writers for hierarchical file processors, file opening and saving algorithms and menu systems.
63. The salesperson tested seven changes at a time and simplified the code. I checked published prices. On a separate note, I rewrote the interpreter using DevOps. I found the first stable version. I tested each predicate. I wrote type statements and type verification code.
64. The salesperson introduced new features. I checked similar products. I rewrote the interpreter not have Query2=[_|_], but label choicepoints. I rewrote it to not have predicates for points and choicepoints, but use one predicate. I also removed the two reverses from the interpreter.

65. The salesperson converted the Prolog algorithm into List Prolog and converted it into Prolog for Vetusia Web Service, similar to converting it to C. I replaced the product with a similar product. The Vetusia Web Service (VWS) converted the multi-clause predicate into a single predicate with if-then statements. In addition, VWS converted nested findall to multiple predicates if it contained an input statement. At the maximum, a variable could hold choice points from, for example, repeat and return to them at the start of a new predicate.
66. The salesperson made a fast, secure website or used VWS to create faster Prolog code convertable to C code. I wrote an Internet browser called C from a server-side algorithm. This C program could be converted from Prolog with VWS. It could already be Just-In-Time because the choice points were dealt with only if they existed. Lucian Academy had a student account area with assignments and submit and verify algorithms.
67. The salesperson wrote different instructions, placed visual elements differently, changed their appearance, or wrote a foreign Visual Prolog programming language. I created a game with an icon editor with Prolog converted to Javascript. It was in HTML, with buttons to change tools and colours, but Javascript allows painting and dragging. I checked for plagiarism in the algorithm. I checked for the same names and logical structure, which could be converted between findall, maplist and recursive predicates.
68. The salesperson wrote the desktop or smartphone app in Prolog by converting it into C or another language. I attempted to make a programming language version featuring drawing and dragging in the web browser. It converted instructions such as mouse down, mouse position, and mouse up to Javascript. For example, painting areas responded to these events and the algorithm rendered paint at these coordinates. Prolog sped up accessing grids by storing lines of the grid as lists and getting and putting items in order.
69. The salesperson ran JIT in Vetusia Prolog (VP) for speed. I established a store that sold Prolog-based apps for computers and smartphones. Distributors could keep the money made from in-app purchases. Lucian Academy had one to three computer science assignments per diploma. I ran Vetusia Prolog in C or online in Javascript for speed to develop Lucian Academy assignments.
70. The salesperson sold to the company with immortal employees. I asked, \"Can't you run any programming language, including one you've written in the browser?\" I suggested running Vetusia Prolog directly in the browser for security reasons. Running VP in the browser enabled Prolog code to be hidden from viewers, protecting private data. Prolog needed to support different computers and browsers, meaning it should be developed with special software, such as LLVM.
71. The salesperson developed multiple ordered clauses to process data. Lucian CI/CD and Program Finder could help automatically develop and debug code. Lucian CI/CD could automate merging, building and testing, including using Program Finder to scaffold (list and string) pattern-matching and other predicates and write using a variety of commands, such as findall or recursion. Without using neuronetworks, Program Finder could predict counters, level numbers and unpredictable properties such as those of files, dates, input, API results and random data or changing data, and found these based on testing data. Program Finder accepted specifications such as pre-existing predicates, and predicate calls a predicate should use and sped up finding appropriate calls and writing code using type statements or specifications with constants.
72. The salesperson earned an income from teaching students to write software. I graduated from the business sort course every two years during the MBA, and activated sales and bots, conducting business. I automated education with an algorithm that helped students write their projects. Automation helped give me experience in sales and education, and income for my career. I also earned income from software that I had written.
73. The salesperson spent money on professional development. Vetusia Prolog was as powerful as C, compiling to it, allowing it to use C features and was portable to other operating systems and architectures. I questioned, \"Why can't it have stable multithreading?\" which was to do with the CPU. I taught Prolog with exercises, where students completed lab exercises and wrote projects. The course included commands, such as foldr append, to help students write these commands.
74. The salesperson experimented with an Education-as-Computer Science course, where students wrote program finders as the projects. I practised handwriting in my sales diary to keep the skill. I wrote a Computer Science project specification generator. This algorithm generated specifications for each predicate and the predicate dependency chart. The Program Finder tutor could help develop each predicate, where the Program Finder was a project. The dependency chart was an ordered HTML list.
75. The salesperson tested the Prolog algorithm and ran it in VP. Vetusia Prolog returned to each choice point left at the end, returning multiple results. To save memory, VP stored repeated data in global variables. It kept and retrieved variables using a command inserted by the converter or directly sent these variable values to the next page. In this case, the next page converted these values to be used by the algorithm.
76. The salesperson examined the interpreter and Program Finder to produce the interpreter. I ran the time machine in Vetusia Prolog. I replaced words in VP with letters (bytecode) and timed it. I wrote the input and output for the Lucian Academy specification generator for each predicate. The student wrote the predicates top-down or bottom-up, adding backed-up Program Finder updates to produce the algorithm.
77. The salesperson adjusted VOS's memory for particular apps on-the-fly. VP was the operating system running in a web browser. I created a movie, completed my philosophy and algorithms using my database and algorithms, completed my music, made money and studied using it. I started n-degree simplifications of projects for sure disabled students. Their accessibility and language were customised, and they could run their projects on VetusiaOS.
78. The salesperson developed a range of spiritual software programs. The VetusiaOS apps ran one at a time, given a particular priority, when there was enough memory. Users could drag and drop blocks of available memory and CPUs with time. In Lucian Academy, the students used a spiritual thought helper that read their thoughts and helped them avoid mistakes and practise correct thoughts. The students could use a spiritual word processor that saved their on-the-fly ideas and presented with them when they needed them.
79. The salesperson produced job-ready programmers who could program to an advanced level and program business programs. The algorithm tested whether the idea appearing to the person was the same or different to previous statements. The lecturer split the project into questions. For example, the predicates were separate questions. An extensive program may be divided into individual queries and diplomas. 
80. The salesperson produced Vetusia apps for VetusiaOS. I redesigned VetusiaOS to be a good memory manager and run graphical and fast programs. Program Finder wrote algorithms with big loops for complex patterns with multiple or different first clauses. It could produce multiple predicates instead of findall and used type statements to produce code. It could recognise a counter in a run of a predicate and increase it by one.
"]